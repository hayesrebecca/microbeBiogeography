## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
return(list=c(comps,alg.conn))
}
algCone(xx)
lapmat<-toLap(int.mat)
lapmat
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
eigens
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
comps
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
re.eigen
module(-1)
Mod(-1)
Mod(-80)
algCone<-function(int.mat){
#browser()
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
min.eigen<-min(re.eigen)##  Algebraic connectivity
eigen.ratio<-mod(alg.conn/min.eigen)
return(list=c(comps,alg.conn))
}
algCone<-function(int.mat){
#browser()
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
min.eigen<-min(re.eigen)##  Algebraic connectivity
eigen.ratio<-mod(alg.conn/min.eigen)
return(list=c(comps,alg.conn,eigen.ratio))
}
algCone(xx)
algCone<-function(int.mat){
#browser()
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
min.eigen<-min(re.eigen)##  Algebraic connectivity
eigen.ratio<-Mod(alg.conn/min.eigen)
return(list=c(comps,alg.conn,eigen.ratio))
}
algCone(xx)
algCone<-function(int.mat){
browser()
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
min.eigen<-min(re.eigen)##  Algebraic connectivity
eigen.ratio<-Mod(alg.conn/min.eigen)
return(list=c(comps,alg.conn,eigen.ratio))
}
algCone(xx)
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
min.eigen<-min(re.eigen)##  Algebraic connectivity
min.eigen
alg.conn
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
re.eigen
lapmat
getwd
getwd()
setwd("/Users/Magaiarsa/Dropbox/A-PhD/2014_NEW tudo/Redes_Rafael/Bin/A_Laplacianas_2015")
setwd("~/Users/Magaiarsa/Dropbox/A-PhD/2014_NEW tudo/Redes_Rafael/Bin/A_Laplacianas_2015")
setwd("/Users/Magaiarsa/Dropbox/A-PhD/2015_chap-1/80_rafael/Bin/A_Quadradas")
files<-list.files()
files<-files[grep(".csv", files)]
nomes<-unlist(strsplit(x=files, split="quadrada.csv"))
v=1
rotulo<-nomes[v]
x<-as.matrix(read.csv(files[v], row.names=1, as.is=TRUE))
aut<-eigens(x)
aut<-eigen(x)
rownames(aut)<-rotulo
aut
read.csv(file="autovs_2016.csv")
setwd("/Users/Magaiarsa/Dropbox/A-PhD/2015_chap-1/80_rafael/")
read.csv(file="autovs_Q_2016.csv")
setwd("/Users/Magaiarsa/Dropbox/A-PhD/2015_chap-1/")
x<-read.csv(file="autovs_Q_2016.csv")
m<-x
meigen<-matrix(NA, 1,6)
colnames(meigen)<-c("maxA", "minA", "ratioA","maxK", "minK", "ratioK")
degM<-matrix(0, dim(m)[1],dim(m)[1])
diag(degM)<-colSums(m)
algCone(xx)
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
eigens
View(teste)
View(teste)
View(xx)
algCone(xx)
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
re.eigen
min(re.eigen)
length(re.eigen)
re.eigen[1:(length(re.eigen)/2)]
min(re.eigen[1:(length(re.eigen)/2)])##  Algebraic connectivity
eigens<-re.eigen[1:(length(re.eigen)/2)]
eigens
min(eigens(which(eigens!=0)))
eigens<-re.eigen[1:(length(re.eigen)/2)]
min.eigen<-min(eigens(which(eigens!=0)))##  getting the minimum eigen that is not zero
min.eigen<-min(eigens[which(eigens!=0)])##  getting the minimum eigen that is not zero
min.eigen
min(eigens[which(eigens!=0)])##  getting the minimum eigen that is not
alg.conn/min.eigen
alg.conn<-max(re.eigen)##  Algebraic connectivity
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
eigens<-re.eigen[1:(length(re.eigen)/2)]
min.eigen<-min(eigens[which(eigens!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-alg.conn/min.eigen
eigen.ratio
algCone<-function(int.mat){
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
eigens<-re.eigen[1:(length(re.eigen)/2)]
min.eigen<-min(eigens[which(eigens!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-alg.conn/min.eigen
return(list=c(comps,alg.conn,eigen.ratio))
}
algCone(xx)
algCone<-function(int.mat){
broser()
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
eigens<-re.eigen[1:(length(re.eigen)/2)]
min.eigen<-min(eigens[which(eigens!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-alg.conn/min.eigen
return(list=c(comps,alg.conn,eigen.ratio))
}
algCone(xx)
algCone<-function(int.mat){
browser()
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
eigens<-re.eigen[1:(length(re.eigen)/2)]
min.eigen<-min(eigens[which(eigens!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-alg.conn/min.eigen
return(list=c(comps,alg.conn,eigen.ratio))
}
algCone(xx)
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
eigens<-re.eigen[1:(length(re.eigen)/2)]
min.eigen<-min(eigens[which(eigens!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-alg.conn/min.eigen
eigen.ratio
alg.conn
min.eigen
alg.conn/min.eigen
algCone<-function(int.mat){
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
eigens<-re.eigen[1:(length(re.eigen)/2)]
min.eigen<-min(eigens[which(eigens!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-alg.conn/min.eigen
return(list=c(comps,alg.conn,eigen.ratio))
}
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con)
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con
algCone<-function(int.mat){
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
eigens<-re.eigen[1:(length(re.eigen)/2)]
min.eigen<-min(eigens[which(eigens!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-round(alg.conn/min.eigen, 4)
return(list=c(comps,alg.conn,eigen.ratio))
}
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con
teste<-nets[[2]]
teste
teste<-sppPresent(teste)
teste
colSums(teste)
rowsums(teste)
rowSums(teste)
algCone(teste)
algCone<-function(int.mat){
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
browser()
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
eigens<-re.eigen[1:(length(re.eigen)/2)]
min.eigen<-min(eigens[which(eigens!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-round(alg.conn/min.eigen, 4)
return(list=c(comps,alg.conn,eigen.ratio))
}
algCone(teste)
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
eigens
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
min(re.eigen)##  Algebraic connectivity
re.eigen
min(eigens[which(eigens!=0)])
min(re.eigens[which(re.eigens!=0)])
min(re.eigen[which(re.eigen!=0)])
algCone<-function(int.mat){
lapmat<-toLap(int.mat)
## getting the biggest non zero eigenvalue
## calculates all eigenvalues
#browser()
eigens=eigen(lapmat, only.values=TRUE)$values## gets rid of the
## number of zeroes and returns the number of components (= the
## number of zeroes)
comps=round(sum(eigens<=0.00001),1) ## conta numero de autovalores
## iguais a zero
re.eigen<-Re(round(eigens, 4)) ## geting the real parts and rounding
alg.conn<-max(re.eigen)##  Algebraic connectivity
min.eigen<-min(re.eigen[which(re.eigen!=0)])##  getting the minimum eigen that is not zero
eigen.ratio<-round(alg.conn/min.eigen, 4)
return(list=c(comps,alg.conn,eigen.ratio))
}
algCone(teste)
all.alg.Con2<-all.alg.Con
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con.status <- merge(x=all.alg.Con,
y= status.table,
by.x="Site",
by.y="Site")
## add ypr
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$Site,
all.alg.Con.status$Year),
paste(spec$Site, spec$Year))]
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")
all.alg.Con.status$ypr[!all.alg.Con.status$Site %in% baci.sites] <- NA
## change AlgCon to numeric (it is a factor for some reason..)
all.alg.Con.status$AlgCon <- as.numeric(as.character(
all.alg.Con.status$AlgCon))
alg.con.mod <- lmer(AlgCon ~ SiteStatus +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(alg.con.mod)
alg.con.mod.ypr <- lmer(AlgCon ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(alg.con.mod.ypr)
all.alg.Con.status$AlgCon <- as.numeric(as.character(
all.alg.Con.status$AlgCon))
alg.con.mod <- lmer(AlgCon ~ SiteStatus +
(1|Site) + (1|Year),
data=all.alg.Con.status)
alg.con.mod.ypr <- lmer(AlgCon ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(alg.con.mod.ypr)
EigenRatio.mod.ypr <- lmer(EigenRatio ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(EigenRatio.mod.ypr)
all.alg.Con.status$EigenRatio
all.alg.Con.status$EigenRatio <- as.numeric(as.character(
all.alg.Con.status$EigenRatio))
all.alg.Con.status$EigenRatio
all.alg.Con.status
all.alg.Con.status <- merge(x=all.alg.Con,
y= status.table,
by.x="Site",
by.y="Site")
status.table <- table(spec$Site, spec$SiteStatus)
status.table <- as.data.frame(cbind(rownames(status.table),
colnames(status.table)[apply(status.table,
1, which.max)]))
colnames(status.table)<- c("Site", "SiteStatus")
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con
str(all.alg.Con)
all.alg.Con[,3:5]<-as.numeric(as.character(all.alg.Con[,3:5]))
all.alg.Con
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con[,c(3:5)]<-as.numeric(as.character(all.alg.Con[,c(3:5)]))
all.alg.Con
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
str*all.alg.Con
str(all.alg.Con)
algCone(teste)
cc<-algCone(teste)
class(cc)
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con
str(all.alg.Con)
unlist(all.alg.Con)
xc<-unlist(all.alg.Con)
str(xc)
View(xc)
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con.status <- merge(x=all.alg.Con,
y= status.table,
by.x="Site",
by.y="Site")
all.alg.Con.status
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$Site,
all.alg.Con.status$Year),
paste(spec$Site, spec$Year))]
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")
all.alg.Con.status$ypr[!all.alg.Con.status$Site %in% baci.sites] <- NA
all.alg.Con.status
all.alg.Con.status$AlgCon <- as.numeric(as.character(
all.alg.Con.status$AlgCon))
all.alg.Con.status$EigenRatio <- as.numeric(as.character(
all.alg.Con.status$EigenRatio))
all.alg.Con.status
str(all.alg.Con.status)
alg.con.mod <- lmer(AlgCon ~ SiteStatus +
(1|Site) + (1|Year),
data=all.alg.Con.status)
alg.con.mod.ypr <- lmer(AlgCon ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(alg.con.mod.ypr)
EigenRatio.mod.ypr <- lmer(EigenRatio ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(EigenRatio.mod.ypr)
all.alg.Con.status
all.alg.Con <- t(do.call(cbind.data.frame, lapply(nets, algCone)))
all.alg.Con <- as.data.frame(cbind(sites,years, all.alg.Con))
colnames(all.alg.Con) <- c("Site", "Year","Ncomp", "AlgCon", "EigenRatio")
all.alg.Con.status <- merge(x=all.alg.Con,
y= status.table,
by.x="Site",
by.y="Site")
## add ypr
all.alg.Con.status$ypr <- spec$ypr[match(paste(all.alg.Con.status$Site,
all.alg.Con.status$Year),
paste(spec$Site, spec$Year))]
baci.sites <- c("MullerB", "Sperandio", "Barger", "Butler", "Hrdy")
all.alg.Con.status$ypr[!all.alg.Con.status$Site %in% baci.sites] <- NA
## change AlgCon to numeric (it is a factor for some reason..)
all.alg.Con.status$AlgCon <- as.numeric(as.character(
all.alg.Con.status$AlgCon))
all.alg.Con.status$EigenRatio <- as.numeric(as.character(
all.alg.Con.status$EigenRatio))
alg.con.mod.ypr <- lmer(AlgCon ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(alg.con.mod.ypr)
EigenRatio.mod.ypr <- lmer(EigenRatio ~ ypr +
(1|Site) + (1|Year),
data=all.alg.Con.status)
summary(EigenRatio.mod.ypr)
setwd('~/Dropbox/hedgerow_assembly/analysis/networkLevel')
source('plotting/src/predictIntervals.R')
source('plotting/src/CIplotting.R')
source('plotting/src/plotPanels_resilence.R')
source('src/initialize.R')
install.packages("igraph")
source('src/initialize.R')
install.packages("bipartite")
source('src/initialize.R')
save(alg.con.mod.ypr, all.alg.Con.status,
file="saved/mods/AlgCon2.Rdata")
load(file=file.path(save.path, 'mods/AlgCon.Rdata'))
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,
na.rm=TRUE),
to= max(all.alg.Con.status$ypr,
na.rm=TRUE),
length=10),
AlgCon=0)
ypr.pi.alg <- predict.int(mod= alg.con.mod.ypr,
dd=dd.ypr.alg,
y="AlgCon",
family="gaussian")
plot.predict.ypr(new.dd=ypr.pi.alg,
ylabel="Robustness to perturbation",
dats=all.alg.Con.status,
y1="AlgCon",
extinction.method="perturb")
dd.ypr.alg <- expand.grid(ypr=seq(from= min(all.alg.Con.status$ypr,
na.rm=TRUE),
to= max(all.alg.Con.status$ypr,
na.rm=TRUE),
length=10),
EigenRatio=0)
dd.ypr.alg
ypr.pi.alg <- predict.int(mod= alg.con.mod.ypr,
dd=dd.ypr.eigen,
y="EigenRatio",
family="gaussian")
