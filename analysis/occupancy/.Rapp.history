c.pol[lower.tri(as.matrix(c.pol))]
as.matrix(c.pol)[lower.tri(as.matrix(c.pol))]
as.matrix(c.pol)[lower.tri(as.matrix(c.pol))]
comm.dis <- function(spec.dat, type){#
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b))])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])
comm.dis <- function(spec.dat, type){#
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity
c.pol
c.plant
c.dist
lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))
lm.pol
summary(lm.pol)
lm.plant <- lm(c.plant~log(c.dist))
summary(lm.plant)
Q
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  }#
  path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste(types[1], "phyo-beta", sub, sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #summary(lm.int)))#
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  }#
  path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", types[1], sub, sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #summary(lm.int)))#
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    prep.comm <- aggregate(spec.dat[, type],#
                           list(site=spec.dat$Site,#
                                sp=spec.dat[, type]), length)#
    comm <- samp2site.spp(prep.comm$site, prep.comm$sp, prep.comm$x)#
    comm.dis <- as.matrix(vegdist(comm, "chao", diag= TRUE))#
    c.comm <- comm.dis[lower.tri(comm.dis)]#
    return(c.comm)#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2])#
  ##interaction dissimilarity#
  c.int <-  comm.dis(spec.dat, types[3])#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
    points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  }#
  path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("dd", types[1], sub, sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant), summary(lm.int)))#
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")#
gen <- ppint.dis(spec, types= c("Genus", "PlantGenus", "IntGen"),#
                 c.dist=c.dist, sub="all")#
#
spec.bee <- spec[spec$Order == "Hymenoptera",]#
sp.bee <- ppint.dis(spec.bee, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="bee")#
gen.bee <- ppint.dis(spec.bee, types= c("Genus", "PlantGenus", "IntGen"),#
                 c.dist=c.dist, sub="bee")#
#
spec.lep <- spec[spec$Order == "Lepidoptera",]#
sp.lep <- ppint.dis(spec.lep, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="lep")#
gen.lep <- ppint.dis(spec.lep, types= c("Genus", "PlantGenus", "IntGen"),#
                 c.dist=c.dist, sub="lep")#
#
spec.syr <- spec[spec$Family == "Syrphidae",]#
sp.syr <- ppint.dis(spec.syr, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="syrphid")#
gen.syr <- ppint.dis(spec.syr, types= c("Genus", "PlantGenus", "IntGen"),#
                 c.dist=c.dist, sub="syrphid")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    prep.comm <- aggregate(spec.dat[, type],#
                           list(site=spec.dat$Site,#
                                sp=spec.dat[, type]), length)#
    comm <- samp2site.spp(prep.comm$site, prep.comm$sp, prep.comm$x)#
    comm.dis <- as.matrix(vegdist(comm, "chao", diag= TRUE))#
    c.comm <- comm.dis[lower.tri(comm.dis)]#
    return(c.comm)#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2])#
  ##interaction dissimilarity#
  c.int <-  comm.dis(spec.dat, types[3])#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
    points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  }#
  path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("dd", types[1], sub, sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant), summary(lm.int)))#
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")#
gen <- ppint.dis(spec, types= c("Genus", "PlantGenus", "IntGen"),#
                 c.dist=c.dist, sub="all")#
#
spec.bee <- spec[spec$Order == "Hymenoptera",]#
sp.bee <- ppint.dis(spec.bee, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="bee")#
gen.bee <- ppint.dis(spec.bee, types= c("Genus", "PlantGenus", "IntGen"),#
                 c.dist=c.dist, sub="bee")#
#
spec.lep <- spec[spec$Order == "Lepidoptera",]#
sp.lep <- ppint.dis(spec.lep, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="lep")#
gen.lep <- ppint.dis(spec.lep, types= c("Genus", "PlantGenus", "IntGen"),#
                 c.dist=c.dist, sub="lep")#
#
spec.syr <- spec[spec$Family == "Syrphidae",]#
sp.syr <- ppint.dis(spec.syr, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="syrphid")#
gen.syr <- ppint.dis(spec.syr, types= c("Genus", "PlantGenus", "IntGen"),#
                 c.dist=c.dist, sub="syrphid")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    prep.comm <- aggregate(spec.dat[, type],#
                           list(site=spec.dat$Site,#
                                sp=spec.dat[, type]), length)#
    comm <- samp2site.spp(prep.comm$site, prep.comm$sp, prep.comm$x)#
    comm.dis <- as.matrix(vegdist(comm, "chao", diag= TRUE))#
    c.comm <- comm.dis[lower.tri(comm.dis)]#
    return(c.comm)#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2])#
  ##interaction dissimilarity#
  c.int <-  comm.dis(spec.dat, types[3])#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
    points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  }#
  path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("dd", types[1], sub, sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant), summary(lm.int)))#
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")#
gen <- ppint.dis(spec, types= c("Genus", "PlantGenus", "IntGen"),#
                 c.dist=c.dist, sub="all")#
#
spec.bee <- spec[spec$Order == "Hymenoptera",]#
sp.bee <- ppint.dis(spec.bee, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="bee")#
gen.bee <- ppint.dis(spec.bee, types= c("Genus", "PlantGenus", "IntGen"),#
                 c.dist=c.dist, sub="bee")#
#
spec.lep <- spec[spec$Order == "Lepidoptera",]#
sp.lep <- ppint.dis(spec.lep, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="lep")#
gen.lep <- ppint.dis(spec.lep, types= c("Genus", "PlantGenus", "IntGen"),#
                 c.dist=c.dist, sub="lep")#
#
spec.syr <- spec[spec$Family == "Syrphidae",]#
sp.syr <- ppint.dis(spec.syr, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="syrphid")#
gen.syr <- ppint.dis(spec.syr, types= c("Genus", "PlantGenus", "IntGen"),#
                 c.dist=c.dist, sub="syrphid")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  }#
  path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", types[1], sub, sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #summary(lm.int)))#
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')
load('saved/1-0-summary.RData')#
cols <- c('mean', 'sd', '2.5%', '97.5%', 'Rhat', 'n.eff')#
summary$bugs[,cols]
logit(10.32)
exbit(10.32)
expit(10.32)
expit(-2.017)
d$d
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
d
specimen <- read.csv('data/spec.csv', as.is=TRUE)#
  specimen <- specimen[which(specimen$Species!=''),]#
  specimen$Date <- as.Date(specimen$Date, format='%m/%d/%y')
head(specimen$Date)
source('src/make-matrix.R')#
#
prep <- function(nzero, threshold, phen, save.dir) {#
#
  ## create big site x date x species matrix#
  specimen <- read.csv('data/spec.csv', as.is=TRUE)#
  specimen <- specimen[which(specimen$Species!=''),]#
  specimen$Date <- as.Date(specimen$Date, format='%m/%d/%y')#
  specimen$GenusSpecies <-#
    fix.white.space(paste(specimen$Genus, #
                          specimen$Species,#
                          specimen$SubSpecies))#
  sr.sched <- read.csv('data/conditions.csv', as.is=TRUE)#
  sr.sched$Date <- as.Date(sr.sched$Date, format='%m/%d/%y')#
#
  null.mat <- tapply(rep(0, nrow(sr.sched)),#
                     list(sites=paste(sr.sched$Site),#
                          dates=sr.sched$Date), sum)#
  d <- data.frame(pollinator=specimen$GenusSpecies,#
                  site=specimen$Site,#
                  date=specimen$Date)#
#
  pollinator.id <- id(d$pollinator)#
  mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(d$pollinator), #
                    var1=as.vector(d$site),#
                    var2=d$date)#
#
  sites <- rownames(mats[[1]])#
  dates <- colnames(mats[[1]])#
  species <- names(mats)#
  mat <- array(unlist(mats), dim=c(dim(mats[[1]]), length(mats)))#
  dimnames(mat) <- list(site=sites, date=dates, species=species)#
  mm <- make.mat(mat, threshold, nzero)#
  mat <- mm$mat#
print(mat)#
  ## make 4D matrix#
  mats <- lapply(1:dim(mat)[2], function(x) mat[,x,])#
  mats.split <- split(mats, dimnames(mat)$date)#
  yr.table <- table(dimnames(mat)$date)#
  X <- array(NA, dim=c(dim(mat)[1], length(yr.table),#
                   max(yr.table), dim(mat)[3]))#
  dimnames(X) <- list(site=dimnames(mat)$site,#
                      year=unique(dimnames(mat)$date),#
                      rep=1:max(yr.table),#
                      species=dimnames(mat)$species)#
#
  null.mat <- matrix(NA, dim(mat)[1], dim(mat)[3],#
                     dimnames=dimnames(X)[c('site', 'species')])#
  f <- function(i) {#
    missing <- max(yr.table)-yr.table[i]#
    if(missing==0) return(mats.split[[i]])#
    c(mats.split[[i]], lapply(1:missing, function(x) null.mat))#
  }#
  tmp <- lapply(seq_along(yr.table), f)#
#
  for(i in 1:length(yr.table))#
    for(j in 1:max(yr.table))#
      X[,i,j,] <- tmp[[i]][[j]]#
#
  ## only keep sites with some positive number of reps#
  no.reps <- apply(mat, 1, function(x) sum(x>=0, na.rm=TRUE))==0#
  X <- X[!no.reps,,,,drop=FALSE]#
#
  make.date.mat <- function(dates) {#
    date.mat <- array(NA, dim=dim(X)[1:3], dimnames=dimnames(X)[1:3])#
    for(i in seq_along(dates)) {#
      year <- as.numeric(format(as.Date(dates[[i]], format='%Y-%m-%d'),#
                                format = '%Y'))#
      lengths <- rle(as.vector(year))$lengths#
      ind <- cbind(rep(i, sum(lengths)),#
                   match(year, dimnames(X)$year),#
                   as.vector(unlist(sapply(lengths, seq_len))))#
      date.mat[ind] <- strptime(dates[[i]], '%Y-%m-%d')$yday+1 #
    }#
    date.mat#
  }#
  date.mats <- lapply(mm$dates, make.date.mat)#
  dm <- array(unlist(date.mats),#
              dim=c(dim(date.mats[[1]]), length(date.mats)))#
  dimnames(dm) <- dimnames(X)#
  ## function to re-arrange replicate dimension#
  compress <- function(x) {#
    if(!any(is.na(x))) return(x)#
    return(c(x[!is.na(x)], x[is.na(x)]))#
  }#
  X <- aperm(apply(X, c(1,2,4), compress), c(2,3,1,4))#
  names(dimnames(X)) <- c("site", "year", "rep", "species")#
  dm <- aperm(apply(dm, c(1,2,4), compress), c(2,3,1,4))#
#
  ## inits#
  ## specify the initial values#
  ## z.init <- apply(X, c(1,2,4),#
  ##                 function(x) (sum(x,na.rm=TRUE)>0)*1)#
  ## z.init[apply(X, c(1,2,4), function(x) !any(!is.na(x)))] <- NA#
  z.init <- X#
  ## z.init[z.init==0] <- 1#
  save.path <- file.path('saved',#
                         sprintf('%s-%d.RData', threshold, nzero))#
#
  list(X=X,#
       day=standardize(dm),#
       lat=standardize(specimen$Lat),#
       polspec=standardize(specimen$PolSpec),#
       plantspec=standardize(specimen$PlantSpec),#
       nrep=apply(X, c(1,2,4),#
         function(x) sum(x>=0,na.rm=TRUE)),#
       z.init=z.init,#
       nsp=dim(X)[4],#
       nsite=dim(X)[1],#
       nyear=dim(X)[2],#
       file.name=save.path)#
}#
#
analyse.ms.ms <- function(d, case, ...) {#
#
  ## browser()#
  ## d$z.init[11,,88]#
  ## dimnames(d$z.init)[[1]][11]#
  file.name <- d$file.name#
  z.init <- d$z.init#
  my.inits <- function() {#
    list(Z=z.init,#
         omega=1)#
  }#
  d <- d[!names(d) %in% c('z.init', 'file.name')]#
  dd <- list(data=d, inits=my.inits, params=get.params())#
  res <- list(data=d, bugs=ms.ms(dd,...))#
  summary <- list(data=d, bugs=res$bugs$BUGSoutput$summary)#
  save(summary, file=sprintf('%s-summary.RData',#
                  strsplit(file.name,split='.RData')[[1]]))#
  save(res, file=file.name)#
  NULL#
}
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
sr.sched <- read.csv('data/conditions.csv', as.is=TRUE)#
  sr.sched$Date <- as.Date(sr.sched$Date, format='%m/%d/%y')
sr.sched
specimen <- read.csv('data/spec.csv', as.is=TRUE)#
  specimen <- specimen[which(specimen$Species!=''),]#
  specimen$Date <- as.Date(specimen$Date, format='%m/%d/%y')#
  specimen$GenusSpecies <-#
    fix.white.space(paste(specimen$Genus, #
                          specimen$Species,#
                          specimen$SubSpecies))#
  sr.sched <- read.csv('data/conditions.csv', as.is=TRUE)#
  sr.sched$Date <- as.Date(sr.sched$Date, format='%m/%d/%y')#
#
  null.mat <- tapply(rep(0, nrow(sr.sched)),#
                     list(sites=paste(sr.sched$Site),#
                          dates=sr.sched$Date), sum)
null.mat
d <- data.frame(pollinator=specimen$GenusSpecies,#
                  site=specimen$Site,#
                  date=specimen$Date)
pollinator.id <- id(d$pollinator)#
  mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(d$pollinator), #
                    var1=as.vector(d$site),#
                    var2=d$date)
mats
sites <- rownames(mats[[1]])#
  dates <- colnames(mats[[1]])
sites
dates
species <- names(mats)#
  mat <- array(unlist(mats), dim=c(dim(mats[[1]]), length(mats)))#
  dimnames(mat) <- list(site=sites, date=dates, species=species)
mat
mm <- make.mat(mat, threshold, nzero)#
  mat <- mm$mat
source('src/make-matrix.R')
mm <- make.mat(mat, threshold, nzero)#
  mat <- mm$mat
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
************************************************************#
setwd('~/Dropbox/Yosemite/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model-SevClass.R')#
## ************************************************************#
runif(1)#
#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
specimen <- read.csv('data/spec.csv', as.is=TRUE)
colnames(specimen)
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
source('src/make-matrix.R')#
#
prep <- function(nzero, threshold, phen, save.dir) {#
  ## create big site x date x species matrix#
  specimen <- read.csv('data/spec.csv', as.is=TRUE)#
  specimen$Date <- as.Date(specimen$Date, format='%m/%d/%y')#
  specimen$GenusSpecies <-#
    fix.white.space(paste(specimen$Genus, #
                          specimen$Species,#
                          specimen$SubSpecies))#
browser()#
  sr.sched <- read.csv('data/conditions.csv', as.is=TRUE)#
  sr.sched$Date <- as.Date(sr.sched$Date, format='%m/%d/%y')#
#
  null.mat <- tapply(rep(0, nrow(sr.sched)),#
                     list(sites=paste(sr.sched$Site),#
                          dates=sr.sched$Date), sum)#
  d <- data.frame(pollinator=specimen$GenusSpecies,#
                  site=specimen$Site,#
                  date=specimen$Date)#
#
  pollinator.id <- id(d$pollinator)#
  mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(d$pollinator), #
                    var1=as.vector(d$site),#
                    var2=d$date)#
#
  sites <- rownames(mats[[1]])#
  dates <- colnames(mats[[1]])#
  species <- names(mats)#
  mat <- array(unlist(mats), dim=c(dim(mats[[1]]), length(mats)))#
  dimnames(mat) <- list(site=sites, date=dates, species=species)#
  mm <- make.mat(mat, threshold, nzero)#
  mat <- mm$mat#
print(mat)#
  ## make 4D matrix#
  mats <- lapply(1:dim(mat)[2], function(x) mat[,x,])#
  mats.split <- split(mats, dimnames(mat)$date)#
  yr.table <- table(dimnames(mat)$date)#
  X <- array(NA, dim=c(dim(mat)[1], length(yr.table),#
                   max(yr.table), dim(mat)[3]))#
  dimnames(X) <- list(site=dimnames(mat)$site,#
                      year=unique(dimnames(mat)$date),#
                      rep=1:max(yr.table),#
                      species=dimnames(mat)$species)#
#
  null.mat <- matrix(NA, dim(mat)[1], dim(mat)[3],#
                     dimnames=dimnames(X)[c('site', 'species')])#
  f <- function(i) {#
    missing <- max(yr.table)-yr.table[i]#
    if(missing==0) return(mats.split[[i]])#
    c(mats.split[[i]], lapply(1:missing, function(x) null.mat))#
  }#
  tmp <- lapply(seq_along(yr.table), f)#
#
  for(i in 1:length(yr.table))#
    for(j in 1:max(yr.table))#
      X[,i,j,] <- tmp[[i]][[j]]#
#
  ## only keep sites with some positive number of reps#
  no.reps <- apply(mat, 1, function(x) sum(x>=0, na.rm=TRUE))==0#
  X <- X[!no.reps,,,,drop=FALSE]#
#
  make.date.mat <- function(dates) {#
    date.mat <- array(NA, dim=dim(X)[1:3], dimnames=dimnames(X)[1:3])#
    for(i in seq_along(dates)) {#
      year <- as.numeric(format(as.Date(dates[[i]], format='%Y-%m-%d'),#
                                format = '%Y'))#
      lengths <- rle(as.vector(year))$lengths#
      ind <- cbind(rep(i, sum(lengths)),#
                   match(year, dimnames(X)$year),#
                   as.vector(unlist(sapply(lengths, seq_len))))#
      date.mat[ind] <- strptime(dates[[i]], '%Y-%m-%d')$yday+1 #
    }#
    date.mat#
  }#
  date.mats <- lapply(mm$dates, make.date.mat)#
  dm <- array(unlist(date.mats),#
              dim=c(dim(date.mats[[1]]), length(date.mats)))#
  dimnames(dm) <- dimnames(X)#
  ## function to re-arrange replicate dimension#
  compress <- function(x) {#
    if(!any(is.na(x))) return(x)#
    return(c(x[!is.na(x)], x[is.na(x)]))#
  }#
  X <- aperm(apply(X, c(1,2,4), compress), c(2,3,1,4))#
  names(dimnames(X)) <- c("site", "year", "rep", "species")#
  dm <- aperm(apply(dm, c(1,2,4), compress), c(2,3,1,4))#
#
  z.init <- X#
  save.path <- file.path('saved',#
                         sprintf('%s-%d.RData', threshold, nzero))#
#
  list(X=X,#
       day=standardize(dm),#
       lat=standardize(specimen$Lat),#
       polspec=standardize(specimen$PolSpec),#
       plantspec=standardize(specimen$PlantSpec),#
       nrep=apply(X, c(1,2,4),#
         function(x) sum(x>=0,na.rm=TRUE)),#
       z.init=z.init,#
       nsp=dim(X)[4],#
       nsite=dim(X)[1],#
       nyear=dim(X)[2],#
       file.name=save.path)#
}#
#
analyse.ms.ms <- function(d, case, ...) {#
  file.name <- d$file.name#
  z.init <- d$z.init#
  my.inits <- function() {#
    list(Z=z.init,#
         omega=1)#
  }#
  d <- d[!names(d) %in% c('z.init', 'file.name')]#
  dd <- list(data=d, inits=my.inits, params=get.params())#
  res <- list(data=d, bugs=ms.ms(dd,...))#
  summary <- list(data=d, bugs=res$bugs$BUGSoutput$summary)#
  save(summary, file=sprintf('%s-summary.RData',#
                  strsplit(file.name,split='.RData')[[1]]))#
  save(res, file=file.name)#
  NULL#
}
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
head(specimen)
sr.sched <- read.csv('data/conditions.csv', as.is=TRUE)#
  sr.sched$Date <- as.Date(sr.sched$Date, format='%m/%d/%y')
sr.sched
null.mat <- tapply(rep(0, nrow(sr.sched)),#
                     list(sites=paste(sr.sched$Site),#
                          dates=sr.sched$Date), sum)
null.mat
d <- data.frame(pollinator=specimen$GenusSpecies,#
                  site=specimen$Site,#
                  date=specimen$Date)
head(d)
pollinator.id <- id(d$pollinator)#
  mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(d$pollinator), #
                    var1=as.vector(d$site),#
                    var2=d$date)
pollinator.ir
pollinator.id
mats
sites <- rownames(mats[[1]])#
  dates <- colnames(mats[[1]])#
  species <- names(mats)
sites
dates
species
mat <- array(unlist(mats), dim=c(dim(mats[[1]]), length(mats)))#
  dimnames(mat) <- list(site=sites, date=dates, species=species)
mm <- make.mat(mat, threshold, nzero)#
  mat <- mm$mat
mat
dates
source('src/make-matrix.R')#
#
prep <- function(nzero, threshold, phen, save.dir) {#
  ## create big site x date x species matrix#
  specimen <- read.csv('data/spec.csv', as.is=TRUE)#
  specimen$Date <- as.Date(specimen$DateStart, format='%m/%d/%y')#
  specimen$GenusSpecies <-#
    fix.white.space(paste(specimen$Genus, #
                          specimen$Species,#
                          specimen$SubSpecies))#
browser()#
  sr.sched <- read.csv('data/conditions.csv', as.is=TRUE)#
  sr.sched$Date <- as.Date(sr.sched$Date, format='%m/%d/%y')#
#
  null.mat <- tapply(rep(0, nrow(sr.sched)),#
                     list(sites=paste(sr.sched$Site),#
                          dates=sr.sched$Date), sum)#
  d <- data.frame(pollinator=specimen$GenusSpecies,#
                  site=specimen$Site,#
                  date=specimen$Date)#
#
  pollinator.id <- id(d$pollinator)#
  mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(d$pollinator), #
                    var1=as.vector(d$site),#
                    var2=d$date)#
#
  sites <- rownames(mats[[1]])#
  dates <- colnames(mats[[1]])#
  species <- names(mats)#
  mat <- array(unlist(mats), dim=c(dim(mats[[1]]), length(mats)))#
  dimnames(mat) <- list(site=sites, date=dates, species=species)#
  mm <- make.mat(mat, threshold, nzero)#
  mat <- mm$mat#
print(mat)#
  ## make 4D matrix#
  mats <- lapply(1:dim(mat)[2], function(x) mat[,x,])#
  mats.split <- split(mats, dimnames(mat)$date)#
  yr.table <- table(dimnames(mat)$date)#
  X <- array(NA, dim=c(dim(mat)[1], length(yr.table),#
                   max(yr.table), dim(mat)[3]))#
  dimnames(X) <- list(site=dimnames(mat)$site,#
                      year=unique(dimnames(mat)$date),#
                      rep=1:max(yr.table),#
                      species=dimnames(mat)$species)#
#
  null.mat <- matrix(NA, dim(mat)[1], dim(mat)[3],#
                     dimnames=dimnames(X)[c('site', 'species')])#
  f <- function(i) {#
    missing <- max(yr.table)-yr.table[i]#
    if(missing==0) return(mats.split[[i]])#
    c(mats.split[[i]], lapply(1:missing, function(x) null.mat))#
  }#
  tmp <- lapply(seq_along(yr.table), f)#
#
  for(i in 1:length(yr.table))#
    for(j in 1:max(yr.table))#
      X[,i,j,] <- tmp[[i]][[j]]#
#
  ## only keep sites with some positive number of reps#
  no.reps <- apply(mat, 1, function(x) sum(x>=0, na.rm=TRUE))==0#
  X <- X[!no.reps,,,,drop=FALSE]#
#
  make.date.mat <- function(dates) {#
    date.mat <- array(NA, dim=dim(X)[1:3], dimnames=dimnames(X)[1:3])#
    for(i in seq_along(dates)) {#
      year <- as.numeric(format(as.Date(dates[[i]], format='%Y-%m-%d'),#
                                format = '%Y'))#
      lengths <- rle(as.vector(year))$lengths#
      ind <- cbind(rep(i, sum(lengths)),#
                   match(year, dimnames(X)$year),#
                   as.vector(unlist(sapply(lengths, seq_len))))#
      date.mat[ind] <- strptime(dates[[i]], '%Y-%m-%d')$yday+1 #
    }#
    date.mat#
  }#
  date.mats <- lapply(mm$dates, make.date.mat)#
  dm <- array(unlist(date.mats),#
              dim=c(dim(date.mats[[1]]), length(date.mats)))#
  dimnames(dm) <- dimnames(X)#
  ## function to re-arrange replicate dimension#
  compress <- function(x) {#
    if(!any(is.na(x))) return(x)#
    return(c(x[!is.na(x)], x[is.na(x)]))#
  }#
  X <- aperm(apply(X, c(1,2,4), compress), c(2,3,1,4))#
  names(dimnames(X)) <- c("site", "year", "rep", "species")#
  dm <- aperm(apply(dm, c(1,2,4), compress), c(2,3,1,4))#
#
  z.init <- X#
  save.path <- file.path('saved',#
                         sprintf('%s-%d.RData', threshold, nzero))#
#
  list(X=X,#
       day=standardize(dm),#
       lat=standardize(specimen$Lat),#
       polspec=standardize(specimen$PolSpec),#
       plantspec=standardize(specimen$PlantSpec),#
       nrep=apply(X, c(1,2,4),#
         function(x) sum(x>=0,na.rm=TRUE)),#
       z.init=z.init,#
       nsp=dim(X)[4],#
       nsite=dim(X)[1],#
       nyear=dim(X)[2],#
       file.name=save.path)#
}#
#
analyse.ms.ms <- function(d, case, ...) {#
  file.name <- d$file.name#
  z.init <- d$z.init#
  my.inits <- function() {#
    list(Z=z.init,#
         omega=1)#
  }#
  d <- d[!names(d) %in% c('z.init', 'file.name')]#
  dd <- list(data=d, inits=my.inits, params=get.params())#
  res <- list(data=d, bugs=ms.ms(dd,...))#
  summary <- list(data=d, bugs=res$bugs$BUGSoutput$summary)#
  save(summary, file=sprintf('%s-summary.RData',#
                  strsplit(file.name,split='.RData')[[1]]))#
  save(res, file=file.name)#
  NULL#
}
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
ysource('src/make-matrix.R')#
#
prep <- function(nzero, threshold, phen, save.dir) {#
  ## create big site x date x species matrix#
  specimen <- read.csv('data/spec.csv', as.is=TRUE)#
  specimen$Date <- as.Date(specimen$DateStart, format='%m/%d/%y')#
  specimen$GenusSpecies <-#
    fix.white.space(paste(specimen$Genus, #
                          specimen$Species,#
                          specimen$SubSpecies))#
  sr.sched <- read.csv('data/conditions.csv', as.is=TRUE)#
  sr.sched$Date <- as.Date(sr.sched$DateStart, format='%m/%d/%Y')#
#
  null.mat <- tapply(rep(0, nrow(sr.sched)),#
                     list(sites=paste(sr.sched$Site),#
                          dates=sr.sched$Date), sum)#
  d <- data.frame(pollinator=specimen$GenusSpecies,#
                  site=specimen$Site,#
                  date=specimen$Date)#
#
  pollinator.id <- id(d$pollinator)#
  mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(d$pollinator), #
                    var1=as.vector(d$site),#
                    var2=d$date)#
#
  sites <- rownames(mats[[1]])#
  dates <- colnames(mats[[1]])#
  species <- names(mats)#
  mat <- array(unlist(mats), dim=c(dim(mats[[1]]), length(mats)))#
  dimnames(mat) <- list(site=sites, date=dates, species=species)#
  mm <- make.mat(mat, threshold, nzero)#
  mat <- mm$mat#
print(mat)#
  ## make 4D matrix#
  mats <- lapply(1:dim(mat)[2], function(x) mat[,x,])#
  mats.split <- split(mats, dimnames(mat)$date)#
  yr.table <- table(dimnames(mat)$date)#
  X <- array(NA, dim=c(dim(mat)[1], length(yr.table),#
                   max(yr.table), dim(mat)[3]))#
  dimnames(X) <- list(site=dimnames(mat)$site,#
                      year=unique(dimnames(mat)$date),#
                      rep=1:max(yr.table),#
                      species=dimnames(mat)$species)#
#
  null.mat <- matrix(NA, dim(mat)[1], dim(mat)[3],#
                     dimnames=dimnames(X)[c('site', 'species')])#
  f <- function(i) {#
    missing <- max(yr.table)-yr.table[i]#
    if(missing==0) return(mats.split[[i]])#
    c(mats.split[[i]], lapply(1:missing, function(x) null.mat))#
  }#
  tmp <- lapply(seq_along(yr.table), f)#
#
  for(i in 1:length(yr.table))#
    for(j in 1:max(yr.table))#
      X[,i,j,] <- tmp[[i]][[j]]#
#
  ## only keep sites with some positive number of reps#
  no.reps <- apply(mat, 1, function(x) sum(x>=0, na.rm=TRUE))==0#
  X <- X[!no.reps,,,,drop=FALSE]#
#
  make.date.mat <- function(dates) {#
    date.mat <- array(NA, dim=dim(X)[1:3], dimnames=dimnames(X)[1:3])#
    for(i in seq_along(dates)) {#
      year <- as.numeric(format(as.Date(dates[[i]], format='%Y-%m-%d'),#
                                format = '%Y'))#
      lengths <- rle(as.vector(year))$lengths#
      ind <- cbind(rep(i, sum(lengths)),#
                   match(year, dimnames(X)$year),#
                   as.vector(unlist(sapply(lengths, seq_len))))#
      date.mat[ind] <- strptime(dates[[i]], '%Y-%m-%d')$yday+1 #
    }#
    date.mat#
  }#
  date.mats <- lapply(mm$dates, make.date.mat)#
  dm <- array(unlist(date.mats),#
              dim=c(dim(date.mats[[1]]), length(date.mats)))#
  dimnames(dm) <- dimnames(X)#
  ## function to re-arrange replicate dimension#
  compress <- function(x) {#
    if(!any(is.na(x))) return(x)#
    return(c(x[!is.na(x)], x[is.na(x)]))#
  }#
  X <- aperm(apply(X, c(1,2,4), compress), c(2,3,1,4))#
  names(dimnames(X)) <- c("site", "year", "rep", "species")#
  dm <- aperm(apply(dm, c(1,2,4), compress), c(2,3,1,4))#
#
  z.init <- X#
  save.path <- file.path('saved',#
                         sprintf('%s-%d.RData', threshold, nzero))#
#
  list(X=X,#
       day=standardize(dm),#
       lat=standardize(specimen$Lat),#
       polspec=standardize(specimen$PolSpec),#
       plantspec=standardize(specimen$PlantSpec),#
       nrep=apply(X, c(1,2,4),#
         function(x) sum(x>=0,na.rm=TRUE)),#
       z.init=z.init,#
       nsp=dim(X)[4],#
       nsite=dim(X)[1],#
       nyear=dim(X)[2],#
       file.name=save.path)#
}#
#
analyse.ms.ms <- function(d, case, ...) {#
  file.name <- d$file.name#
  z.init <- d$z.init#
  my.inits <- function() {#
    list(Z=z.init,#
         omega=1)#
  }#
  d <- d[!names(d) %in% c('z.init', 'file.name')]#
  dd <- list(data=d, inits=my.inits, params=get.params())#
  res <- list(data=d, bugs=ms.ms(dd,...))#
  summary <- list(data=d, bugs=res$bugs$BUGSoutput$summary)#
  save(summary, file=sprintf('%s-summary.RData',#
                  strsplit(file.name,split='.RData')[[1]]))#
  save(res, file=file.name)#
  NULL#
}
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
source('src/make-matrix.R')#
#
prep <- function(nzero, threshold, phen, save.dir) {#
  browser()#
  ## create big site x date x species matrix#
  specimen <- read.csv('data/spec.csv', as.is=TRUE)#
  specimen$Date <- as.Date(specimen$DateStart, format='%m/%d/%y')#
  specimen$GenusSpecies <-#
    fix.white.space(paste(specimen$Genus, #
                          specimen$Species,#
                          specimen$SubSpecies))#
  sr.sched <- read.csv('data/conditions.csv', as.is=TRUE)#
  sr.sched$Date <- as.Date(sr.sched$DateStart, format='%m/%d/%Y')#
#
  null.mat <- tapply(rep(0, nrow(sr.sched)),#
                     list(sites=paste(sr.sched$Site),#
                          dates=sr.sched$Date), sum)#
  d <- data.frame(pollinator=specimen$GenusSpecies,#
                  site=specimen$Site,#
                  date=specimen$Date)#
#
  pollinator.id <- id(d$pollinator)#
  mats <- make.mats(pollinator.id,#
                    null.mat,#
                    pollinator=as.vector(d$pollinator), #
                    var1=as.vector(d$site),#
                    var2=d$date)#
#
  sites <- rownames(mats[[1]])#
  dates <- colnames(mats[[1]])#
  species <- names(mats)#
  mat <- array(unlist(mats), dim=c(dim(mats[[1]]), length(mats)))#
  dimnames(mat) <- list(site=sites, date=dates, species=species)#
  mm <- make.mat(mat, threshold, nzero)#
  mat <- mm$mat#
print(mat)#
  ## make 4D matrix#
  mats <- lapply(1:dim(mat)[2], function(x) mat[,x,])#
  mats.split <- split(mats, dimnames(mat)$date)#
  yr.table <- table(dimnames(mat)$date)#
  X <- array(NA, dim=c(dim(mat)[1], length(yr.table),#
                   max(yr.table), dim(mat)[3]))#
  dimnames(X) <- list(site=dimnames(mat)$site,#
                      year=unique(dimnames(mat)$date),#
                      rep=1:max(yr.table),#
                      species=dimnames(mat)$species)#
#
  null.mat <- matrix(NA, dim(mat)[1], dim(mat)[3],#
                     dimnames=dimnames(X)[c('site', 'species')])#
  f <- function(i) {#
    missing <- max(yr.table)-yr.table[i]#
    if(missing==0) return(mats.split[[i]])#
    c(mats.split[[i]], lapply(1:missing, function(x) null.mat))#
  }#
  tmp <- lapply(seq_along(yr.table), f)#
#
  for(i in 1:length(yr.table))#
    for(j in 1:max(yr.table))#
      X[,i,j,] <- tmp[[i]][[j]]#
#
  ## only keep sites with some positive number of reps#
  no.reps <- apply(mat, 1, function(x) sum(x>=0, na.rm=TRUE))==0#
  X <- X[!no.reps,,,,drop=FALSE]#
#
  make.date.mat <- function(dates) {#
    date.mat <- array(NA, dim=dim(X)[1:3], dimnames=dimnames(X)[1:3])#
    for(i in seq_along(dates)) {#
      year <- as.numeric(format(as.Date(dates[[i]], format='%Y-%m-%d'),#
                                format = '%Y'))#
      lengths <- rle(as.vector(year))$lengths#
      ind <- cbind(rep(i, sum(lengths)),#
                   match(year, dimnames(X)$year),#
                   as.vector(unlist(sapply(lengths, seq_len))))#
      date.mat[ind] <- strptime(dates[[i]], '%Y-%m-%d')$yday+1 #
    }#
    date.mat#
  }#
  date.mats <- lapply(mm$dates, make.date.mat)#
  dm <- array(unlist(date.mats),#
              dim=c(dim(date.mats[[1]]), length(date.mats)))#
  dimnames(dm) <- dimnames(X)#
  ## function to re-arrange replicate dimension#
  compress <- function(x) {#
    if(!any(is.na(x))) return(x)#
    return(c(x[!is.na(x)], x[is.na(x)]))#
  }#
  X <- aperm(apply(X, c(1,2,4), compress), c(2,3,1,4))#
  names(dimnames(X)) <- c("site", "year", "rep", "species")#
  dm <- aperm(apply(dm, c(1,2,4), compress), c(2,3,1,4))#
#
  z.init <- X#
  save.path <- file.path('saved',#
                         sprintf('%s-%d.RData', threshold, nzero))#
#
  list(X=X,#
       day=standardize(dm),#
       lat=standardize(specimen$Lat),#
       polspec=standardize(specimen$PolSpec),#
       plantspec=standardize(specimen$PlantSpec),#
       nrep=apply(X, c(1,2,4),#
         function(x) sum(x>=0,na.rm=TRUE)),#
       z.init=z.init,#
       nsp=dim(X)[4],#
       nsite=dim(X)[1],#
       nyear=dim(X)[2],#
       file.name=save.path)#
}#
#
analyse.ms.ms <- function(d, case, ...) {#
  file.name <- d$file.name#
  z.init <- d$z.init#
  my.inits <- function() {#
    list(Z=z.init,#
         omega=1)#
  }#
  d <- d[!names(d) %in% c('z.init', 'file.name')]#
  dd <- list(data=d, inits=my.inits, params=get.params())#
  res <- list(data=d, bugs=ms.ms(dd,...))#
  summary <- list(data=d, bugs=res$bugs$BUGSoutput$summary)#
  save(summary, file=sprintf('%s-summary.RData',#
                  strsplit(file.name,split='.RData')[[1]]))#
  save(res, file=file.name)#
  NULL#
}
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
colnames(specimen)
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
Q
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
rm(list=ls())#
library(vegan)#
library(fields)#
library(igraph)#
library(linkcomm)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
source('~/Dropbox/network_assembly/simulation/R/all/CalcMetrics.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")
head(geo)
spec <-#
  read.csv("data/spec.csv")#
mut.adj <- function(x) {#
  nr <- dim(x)[1]#
  nc <- dim(x)[2]#
  to.fill <- matrix(0, ncol=nc + nr, nrow=nc + nr)#
  to.fill[1:nr,(nr+1):(nc+nr)] <- x#
  rownames(to.fill) <- c(rownames(x), rep(NA, nrow(to.fill)-nrow(x)))#
  colnames(to.fill) <- c(colnames(x), rep(NA, ncol(to.fill)-ncol(x)))#
  adj.mat <- graph.adjacency(to.fill, mode= "undirected",#
                             weighted=TRUE,#
                             add.rownames="code", add.colnames="names")#
  return(adj.mat)#
}#
#
pdf.f <- function(f, file, ...) {#
  cat(sprintf("Writing %s\n", file))#
  pdf(file, ...)#
  on.exit(dev.off())#
  f()#
}#
#
prep.comm <- aggregate(spec$GenSp,#
                       list(site=spec$PlantGenSp,#
                            sp=spec$GenSp), length)#
#
comm <- samp2site.spp(prep.comm$site, prep.comm$sp, prep.comm$x)#
g <- mut.adj(comm)#
weights <- as.vector(comm)#
weights <- weights[weights != 0]#
mod <- edge.betweenness.community(g, weights=weights, directed=FALSE)
load(file="lc")
lc
?lc
?getLinkCommunities
load(file="lc")
lc
?getLinkCommunities
?hclust
lc$hclust
spec.dat <- spec
prep.site.comm.pol <- aggregate(spec.dat[, "GenSp",#
                                list(site=spec.dat$Site,#
                                     sp= spec.dat[, "GenSp"), length)#
    site.comm.pol <- samp2site.spp(prep.site.comm.pol$site,#
                               prep.site.comm.pol$sp,#
                               prep.site.comm.pol$x)
prep.site.comm.pol <- aggregate(spec.dat[, "GenSp",#
                                list(site=spec.dat$Site,#
                                     sp= spec.dat[, "GenSp"]), length)#
    site.comm.pol <- samp2site.spp(prep.site.comm.pol$site,#
                               prep.site.comm.pol$sp,#
                               prep.site.comm.pol$x)
prep.site.comm.pol <- aggregate(spec.dat[, "GenSp",#
                                list(site=spec.dat$Site,#
                                     sp= spec.dat[, "GenSp"], length)#
    site.comm.pol <- samp2site.spp(prep.site.comm.pol$site,#
                               prep.site.comm.pol$sp,#
                               prep.site.comm.pol$x)
prep.site.comm.pol <- aggregate(spec.dat[, "GenSp"],#
                                list(site=spec.dat$Site,#
                                     sp= spec.dat[, "GenSp"], length)
site.comm.pol <- samp2site.spp(prep.site.comm.pol$site,#
                               prep.site.comm.pol$sp,#
                               prep.site.comm.pol$x)
prep.site.comm.pol <- aggregate(spec.dat[, "GenSp"],#
                                list(site=spec.dat$Site,#
                                     sp= spec.dat[, "GenSp"], length)#
    site.comm.pol <- samp2site.spp(prep.site.comm.pol$site,#
                               prep.site.comm.pol$sp,#
                               prep.site.comm.pol$x)
prep.site.comm.pol <- aggregate(spec.dat[, "GenSp"],#
                                list(site=spec.dat$Site,#
                                     sp= spec.dat[, "GenSp"]), length)#
    site.comm.pol <- samp2site.spp(prep.site.comm.pol$site,#
                               prep.site.comm.pol$sp,#
                               prep.site.comm.pol$x)
pre.sitecomm.pol
pre.site.comm.pol
site.comm.pol
prep.site.comm.plant <- aggregate(spec.dat[, "PlantGenSp"],#
                                list(site=spec.dat$Site,#
                                     sp= spec.dat[, "PlantGenSp"]), length)#
    site.comm.plant <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm.plant$sp,#
                               prep.site.comm.plant$x)
prep.site.comm.pol <- aggregate(spec.dat[, "GenSp"],#
                                    list(site=spec.dat$Site,#
                                         sp= spec.dat[, "GenSp"]), length)#
    site.comm.pol <- samp2site.spp(prep.site.comm.pol$site,#
                                   prep.site.comm.pol$sp,#
                                   prep.site.comm.pol$x)#
    prep.site.comm.plant <- aggregate(spec.dat[, "PlantGenSp"],#
                                      list(site=spec.dat$Site,#
                                           sp= spec.dat[,#
                                             "PlantGenSp"]),  length)#
    site.comm.plant <- samp2site.spp(prep.site.comm.plant$site,#
                                     prep.site.comm.plant$sp,#
                                     prep.site.comm.plant$x)
site.comm.plant
site.comm <- cbind(site.comm.pol, site.comm.plant)
site.comm
cophenetic(lc$hclust)
phylo.b <- as.matrix(comdist(site.comm, cophenetic(lc$hclust),#
                                 abundance.weighted=FALSE))
phylo.b <- comdist(site.comm, cophenetic(lc$hclust),#
                                 abundance.weighted=FALSE)
colnames(site.comm)
rownames(site.comm)
prep.site.comm.pol <- aggregate(spec.dat[, "GenSp"],#
                                    list(site=spec.dat$Site,#
                                         sp= spec.dat[, "GenSp"]), length)#
    site.comm.pol <- samp2site.spp(prep.site.comm.pol$site,#
                                   prep.site.comm.pol$sp,#
                                   prep.site.comm.pol$x)#
    sites <- rownames(site.comm.pol)#
    pol.ids <- colnames(site.comm.pol)#
    prep.site.comm.plant <- aggregate(spec.dat[, "PlantGenSp"],#
                                      list(site=spec.dat$Site,#
                                           sp= spec.dat[,#
                                             "PlantGenSp"]),  length)#
    site.comm.plant <- samp2site.spp(prep.site.comm.plant$site,#
                                     prep.site.comm.plant$sp,#
                                     prep.site.comm.plant$x)#
    plant.ids <- colnames(site.comm.plant)#
    colnames(site.comm.plant) <- rownames(site.com.plant) <- NULL
colnames(site.comm.plant) <- rownames(site.comm.plant) <- NULL
colnames(site.comm.pol) <- rownames(site.comm.pol) <- NULL
site.comm.pol
site.comm <- cbind(site.comm.pol, site.comm.plant)
head(site.comm)
rownames(site.comm) <- sites#
    colnames(site.comm) <- c(pol.ids, plant.ids)
head(site.comm)
phylo.b <- comdist(site.comm, cophenetic(lc$hclust),#
                                 abundance.weighted=FALSE)
lc$hclust
ncol(site.comm)
plot(hclust)
plot(lc$hclust)
?getLinkCommunities
lc$dist
?getLinkCommunities
lc$numbers
plot(lc$hlust)
load(lc, file="lc.Rdata")
load(file="lc.Rdata")
lc$numbers
lc$pdmax
lc$nodeclusters
?hclust
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  } #
  path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", types[1], sub, sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #summary(lm.int)))#
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    f <- function(){#
      plot(dengram)#
      }#
    pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
               paste("degram", types[1], sub, sep="_"))),#
          width=5, height=5)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  } #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", types[1], sub, sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #summary(lm.int)))#
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    f <- function(){#
      plot(dengram)#
      }#
    pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
               paste("dedrogram", type[1], sub, sep="_"))),#
          width=5, height=5)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  } #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", types[1], sub, sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #summary(lm.int)))#
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    fden <- function(){#
      plot(dengram)#
      }#
    pdf.f(fden, file= file.path(path, sprintf("%s.pdf",#
               paste("dedrogram", type[1], sep="_"))),#
          width=5, height=5)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  } #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", sub, sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #summary(lm.int)))#
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    fden <- function(){#
      plot(dengram)#
      }#
    pdf.f(fden, file= file.path(path, sprintf("%s.pdf",#
               paste("dedrogram", type[1], sep="_"))),#
          width=5, height=5)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  } #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #summary(lm.int)))#
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    fden <- function(){#
      plot(dengram)#
      }#
    pdf.f(fden, file= file.path(path, sprintf("%s.pdf",#
               paste("dedrogram", type[1], sep="_"))),#
          width=10, height=5)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  } #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    fden <- function(){#
      plot(dengram)#
      }#
    pdf.f(fden, file= file.path(path, sprintf("%s.pdf",#
               paste("dedrogram", type[1], sep="_"))),#
          width=10, height=5)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  } #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    fden <- function(){#
      plot(dengram)#
      }#
    pdf.f(fden, file= file.path(path, sprintf("%s.pdf",#
               paste("dedrogram", type[1], sep="_"))),#
          width=20, height=5)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  } #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    fden <- function(){#
      plot(dengram, cex.lab=0.5)#
      }#
    pdf.f(fden, file= file.path(path, sprintf("%s.pdf",#
               paste("dedrogram", type[1], sep="_"))),#
          width=20, height=5)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  } #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    fden <- function(){#
      plot(dengram, cex.lab=0.5)#
      }#
    pdf.f(fden, file= file.path(path, sprintf("%s.pdf",#
               paste("dedrogram", type[1], sep="_"))),#
          width=25, height=5)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~log(c.dist))#
  lm.plant <- lm(c.plant~log(c.dist))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants",#
                            "Interactions"), col=c("red", "blue",#
                                               "green"), pch=16, bty="n")#
  } #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis)#
    fden <- function(){#
      plot(dengram, cex.lab=0.5)#
      }#
    pdf.f(fden, file= file.path(path, sprintf("%s.pdf",#
               paste("dedrogram", type[1], sep="_"))),#
          width=25, height=5)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~scale(log(c.dist)))#
  lm.plant <- lm(c.plant~(log(c.dist)))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants"),#
           col=c("red", "blue"), pch=16, bty="n")#
  } #
  path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", types[1], sub, sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep.R')#
source('src/model_spec_lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
load('saved/1-0-summary.RData')#
cols <- c('mean', 'sd', '2.5%', '97.5%', 'Rhat', 'n.eff')#
summary$bugs[,cols]
specimen <- read.csv('data/spec.csv', as.is=TRUE)
colnames(specimen)
specimen$PlantGenSp
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep_plant.R')#
source('src/model_spec_re-lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
rm(list=ls())#
library(vegan)#
library(fields)#
setwd("~/Dropbox/Sky Islands/Analysis/")#
source('functions/samp2site_spp.R')#
#
geo <-#
  read.csv("../Data/Relational/data/relational/tables/geography.csv")#
#
spec <-#
  read.csv("data/spec.csv")#
#
##distance dissimilarity#
dist.site <- rdist.earth(cbind(geo$Long, geo$Lat), cbind(geo$Long,#
                                                         geo$Lat))#
c.dist <- dist.site[lower.tri(dist.site)]#
#
## dissimilarity of plants, pol, int#
#
ppint.dis <- function(spec.dat, types, c.dist, sub){#
  pdf.f <- function(f, file, ...) {#
    cat(sprintf("Writing %s\n", file))#
    pdf(file, ...)#
    on.exit(dev.off())#
    f()#
  }#
  comm.dis <- function(spec.dat, type){#
    path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
    prep.comm <- aggregate(spec.dat[, type[1]],#
                           list(sp=spec.dat[, type[1]],#
                                sp2= spec.dat[, type[2]]), length)#
    comm <- samp2site.spp(prep.comm$sp, prep.comm$sp2, prep.comm$x)#
    comm.dis <- vegdist(comm, "chao", diag= TRUE)#
    dengram <- hclust(comm.dis, method="average")#
    fden <- function(){#
      plot(dengram, cex.lab=0.5)#
      }#
    pdf.f(fden, file= file.path(path, sprintf("%s.pdf",#
               paste("dedrogram", type[1], sep="_"))),#
          width=25, height=5)#
    prep.site.comm <- aggregate(spec.dat[, type[1]],#
                           list(site=spec.dat$Site,#
                                sp= spec.dat[, type[1]]), length)#
    site.comm <- samp2site.spp(prep.site.comm$site,#
                               prep.site.comm$sp,#
                               prep.site.comm$x)#
    phylo.b <- as.matrix(comdist(site.comm, cophenetic(dengram),#
                                 abundance.weighted=TRUE))#
    return(phylo.b[lower.tri(phylo.b)])#
  }#
  ##pollinator dissimilarity#
  c.pol <-comm.dis(spec.dat, types[1:2])#
  ##plant dissimilarity#
  c.plant <- comm.dis(spec.dat, types[2:1])#
  ##interaction dissimilarity#
  ##c.int <-  comm.dis(spec.dat, types)#
#
  ##linear models#
  lm.pol <- lm(c.pol~scale(log(c.dist)))#
  lm.plant <- lm(c.plant~(log(c.dist)))#
  ##lm.int <- lm(c.int~log(c.dist))#
#
  f <- function(){#
    layout(1)#
    plot(c.pol~c.dist, pch =16, col="red", ylim=c(0,1),#
         xlab="distance", ylab="dissimilarity", log="x")#
    points(c.plant~c.dist, pch=16, col="blue")#
   # points(c.int~c.dist, pch=16, col="green")#
    legend("bottomright", legend= c("Pollinators", "Plants"),#
           col=c("red", "blue"), pch=16, bty="n")#
  } #
  path <- '~/Dropbox/Sky Islands/Analysis/Figures/DistanceDecay' #
  pdf.f(f, file= file.path(path, sprintf("%s.pdf",#
             paste("phylo-beta", types[1], sub, sep="_"))),#
        width=5, height=5)#
  return(list(summary(lm.pol), summary(lm.plant))) #
}#
sp <- ppint.dis(spec, types= c("GenSp", "PlantGenSp", "Int"),#
                c.dist=c.dist, sub="all")
CH <- read.csv("Data/CH.csv")#
CH$site[CH$site == 0] <- 2#
#
age.h <- read.csv("Data/age_history_class.csv")#
age.h <- age.h[match(rownames(CH), rownames(age.h)),]#
#
## add zeros after an individual was killed#
for (i in 1:nrow(CH)){#
  if( CH$h[i] < 44){#
    CH[i,5:48][(CH$h[i]  + 1):44] <- 0#
  } #
}#
#
##split data by sex#
CH.m <- as.matrix(CH[CH$sex == 1,][-(1:4)])#
age.m <- as.matrix(age.h[CH$sex == 1,][-(1)])#
h.m <- as.matrix(CH[CH$sex == 1,"h"])#
site.m <- as.matrix(CH[CH$sex == 1,"site"])#
#
CH.f <- as.matrix(CH[CH$sex == 0,][-(1:4)])#
age.f <- as.matrix(age.h[CH$sex == 0,][-(1)])#
h.f <- as.matrix(CH[CH$sex == 0,"h"])#
site.f <- as.matrix(CH[CH$sex == 0,"site"])#
#
## to avoid individuals captured multiple times in the same day #
CH.f[CH.f > 1] <- 1#
CH.m[CH.m > 1] <- 1#
#
### create groups, augment data#
#
## Augment the capture-histories by pseudo-individuals#
nz <- 500#
CHm.aug <- rbind(CH.m, matrix(0, ncol = dim(CH.m)[2], nrow = nz))#
CHf.aug <- rbind(CH.f, matrix(0, ncol = dim(CH.f)[2], nrow = nz))#
y <- rbind(CHm.aug, CHf.aug)#
#
##sex groups#
f <- rep(2, dim(CHf.aug)[1])#
m <- rep(1, dim(CHm.aug)[1])#
sexes <- c(m, f)#
#
## site groups#
f.site.ag <- c(site.f, rep(2,0.5*nz), rep(1, 0.5*nz))#
m.site.ag <- c(site.m, rep(2,0.5*nz), rep(1, 0.5*nz))#
sites <- c(m.site.ag, f.site.ag)#
#
##create h (last day of possible capture)#
h.m <- c(h.m, rep(44, nz))#
h.f <- c(h.f, rep(44, nz))#
h <- c(h.m, h.f)#
#
##wing.wear groups#
age.m <- rbind(age.m, matrix(NA, nrow=nz, ncol=ncol(age.m)))#
age.f <- rbind(age.f, matrix(NA, nrow=nz, ncol=ncol(age.f)))#
ages <- rbind(age.m, age.f)#
## create a matric of 1s where an indivudal can be caught and 0s after#
## it was caught and killed#
#
available <- matrix(1, nrow=nrow(y), ncol=ncol(y))#
#
for (i in 1:nrow(available)){#
  if(h[i] < 44){#
    available[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
## Good initial values for the latent state z are needed to run the#
## model in JAGS. The simplest option that works is to give just a#
## matrix with a 1 at all places.#
z.init <- y#
z.init[z.init==0] <- 1#
z.init[is.na(z.init)] <- 1#
#
## fill in zeros after an individual was captured and killed#
for (i in 1:nrow(z.init)){#
  if(h[i] < 44){#
    z.init[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
inits <- function(){list(z=z.init)}#
#
## Bundle data#
#
jags.data <- list(y = y, n.occasions = dim(y)[2], M = dim(y)[1],#
                  sexes = sexes, sites=sites, x=available, mm = length(m))#
#
## Parameters monitored#
parameters <- c("psi" ,"beta.p","beta.sex", "beta.slope", "b",#
                "Nsuperm", "Nsuperf", "Nm", "Nf", "Bm", "Bf","alpha")
CH <- read.csv("Data/CH.csv")#
CH$site[CH$site == 0] <- 2#
#
age.h <- read.csv("../../Data/age_history_class.csv")#
age.h <- age.h[match(rownames(CH), rownames(age.h)),]#
#
## add zeros after an individual was killed#
for (i in 1:nrow(CH)){#
  if( CH$h[i] < 44){#
    CH[i,5:48][(CH$h[i]  + 1):44] <- 0#
  } #
}#
#
##split data by sex#
CH.m <- as.matrix(CH[CH$sex == 1,][-(1:4)])#
age.m <- as.matrix(age.h[CH$sex == 1,][-(1)])#
h.m <- as.matrix(CH[CH$sex == 1,"h"])#
site.m <- as.matrix(CH[CH$sex == 1,"site"])#
#
CH.f <- as.matrix(CH[CH$sex == 0,][-(1:4)])#
age.f <- as.matrix(age.h[CH$sex == 0,][-(1)])#
h.f <- as.matrix(CH[CH$sex == 0,"h"])#
site.f <- as.matrix(CH[CH$sex == 0,"site"])#
#
## to avoid individuals captured multiple times in the same day #
CH.f[CH.f > 1] <- 1#
CH.m[CH.m > 1] <- 1#
#
### create groups, augment data#
#
## Augment the capture-histories by pseudo-individuals#
nz <- 500#
CHm.aug <- rbind(CH.m, matrix(0, ncol = dim(CH.m)[2], nrow = nz))#
CHf.aug <- rbind(CH.f, matrix(0, ncol = dim(CH.f)[2], nrow = nz))#
y <- rbind(CHm.aug, CHf.aug)#
#
##sex groups#
f <- rep(2, dim(CHf.aug)[1])#
m <- rep(1, dim(CHm.aug)[1])#
sexes <- c(m, f)#
#
## site groups#
f.site.ag <- c(site.f, rep(2,0.5*nz), rep(1, 0.5*nz))#
m.site.ag <- c(site.m, rep(2,0.5*nz), rep(1, 0.5*nz))#
sites <- c(m.site.ag, f.site.ag)#
#
##create h (last day of possible capture)#
h.m <- c(h.m, rep(44, nz))#
h.f <- c(h.f, rep(44, nz))#
h <- c(h.m, h.f)#
#
##wing.wear groups#
age.m <- rbind(age.m, matrix(NA, nrow=nz, ncol=ncol(age.m)))#
age.f <- rbind(age.f, matrix(NA, nrow=nz, ncol=ncol(age.f)))#
ages <- rbind(age.m, age.f)#
## create a matric of 1s where an indivudal can be caught and 0s after#
## it was caught and killed#
#
available <- matrix(1, nrow=nrow(y), ncol=ncol(y))#
#
for (i in 1:nrow(available)){#
  if(h[i] < 44){#
    available[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
## Good initial values for the latent state z are needed to run the#
## model in JAGS. The simplest option that works is to give just a#
## matrix with a 1 at all places.#
z.init <- y#
z.init[z.init==0] <- 1#
z.init[is.na(z.init)] <- 1#
#
## fill in zeros after an individual was captured and killed#
for (i in 1:nrow(z.init)){#
  if(h[i] < 44){#
    z.init[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
inits <- function(){list(z=z.init)}#
#
## Bundle data#
#
jags.data <- list(y = y, n.occasions = dim(y)[2], M = dim(y)[1],#
                  sexes = sexes, sites=sites, x=available, mm = length(m))#
#
## Parameters monitored#
parameters <- c("psi" ,"beta.p","beta.sex", "beta.slope", "b",#
                "Nsuperm", "Nsuperf", "Nm", "Nf", "Bm", "Bf","alpha")
rm(list=ls())#
library("rjags")#
library("R2jags")#
setwd("~/Dropbox/Speyeria/Working/rest-occ/time-site")
CH <- read.csv("../../Data/CH.csv")#
CH$site[CH$site == 0] <- 2
age.h <- read.csv("../../Data/age_history_class.csv")#
age.h <- age.h[match(rownames(CH), rownames(age.h)),]
CH <- read.csv("../../Data/CH.csv")#
CH$site[CH$site == 0] <- 2#
#
age.h <- read.csv("../../Data/age_history_class.csv")#
age.h <- age.h[match(rownames(CH), rownames(age.h)),]#
#
## add zeros after an individual was killed#
for (i in 1:nrow(CH)){#
  if( CH$h[i] < 44){#
    CH[i,5:48][(CH$h[i]  + 1):44] <- 0#
  } #
}#
#
##split data by sex#
CH.m <- as.matrix(CH[CH$sex == 1,][-(1:4)])#
age.m <- as.matrix(age.h[CH$sex == 1,][-(1)])#
h.m <- as.matrix(CH[CH$sex == 1,"h"])#
site.m <- as.matrix(CH[CH$sex == 1,"site"])#
#
CH.f <- as.matrix(CH[CH$sex == 0,][-(1:4)])#
age.f <- as.matrix(age.h[CH$sex == 0,][-(1)])#
h.f <- as.matrix(CH[CH$sex == 0,"h"])#
site.f <- as.matrix(CH[CH$sex == 0,"site"])#
#
## to avoid individuals captured multiple times in the same day #
CH.f[CH.f > 1] <- 1#
CH.m[CH.m > 1] <- 1#
#
### create groups, augment data#
#
## Augment the capture-histories by pseudo-individuals#
nz <- 500#
CHm.aug <- rbind(CH.m, matrix(0, ncol = dim(CH.m)[2], nrow = nz))#
CHf.aug <- rbind(CH.f, matrix(0, ncol = dim(CH.f)[2], nrow = nz))#
y <- rbind(CHm.aug, CHf.aug)#
#
##sex groups#
f <- rep(2, dim(CHf.aug)[1])#
m <- rep(1, dim(CHm.aug)[1])#
sexes <- c(m, f)#
#
## site groups#
f.site.ag <- c(site.f, rep(2,0.5*nz), rep(1, 0.5*nz))#
m.site.ag <- c(site.m, rep(2,0.5*nz), rep(1, 0.5*nz))#
sites <- c(m.site.ag, f.site.ag)#
#
##create h (last day of possible capture)#
h.m <- c(h.m, rep(44, nz))#
h.f <- c(h.f, rep(44, nz))#
h <- c(h.m, h.f)#
#
##wing.wear groups#
age.m <- rbind(age.m, matrix(NA, nrow=nz, ncol=ncol(age.m)))#
age.f <- rbind(age.f, matrix(NA, nrow=nz, ncol=ncol(age.f)))#
ages <- rbind(age.m, age.f)#
## create a matric of 1s where an indivudal can be caught and 0s after#
## it was caught and killed#
#
available <- matrix(1, nrow=nrow(y), ncol=ncol(y))#
#
for (i in 1:nrow(available)){#
  if(h[i] < 44){#
    available[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
## Good initial values for the latent state z are needed to run the#
## model in JAGS. The simplest option that works is to give just a#
## matrix with a 1 at all places.#
z.init <- y#
z.init[z.init==0] <- 1#
z.init[is.na(z.init)] <- 1#
#
## fill in zeros after an individual was captured and killed#
for (i in 1:nrow(z.init)){#
  if(h[i] < 44){#
    z.init[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
inits <- function(){list(z=z.init)}#
#
## Bundle data#
#
jags.data <- list(y = y, n.occasions = dim(y)[2], M = dim(y)[1],#
                  sexes = sexes, sites=sites, x=available, mm = length(m))#
#
## Parameters monitored#
parameters <- c("psi" ,"beta.p","beta.sex", "beta.slope", "b",#
                "Nsuperm", "Nsuperf", "Nm", "Nf", "Bm", "Bf","alpha")
head(y)
sexes
sites
CH <- read.csv("../../Data/CH.csv")#
CH$site[CH$site == 0] <- 2#
#
age.h <- read.csv("../../Data/age_history_class.csv")#
age.h <- age.h[match(rownames(CH), rownames(age.h)),]#
#
## add zeros after an individual was killed#
for (i in 1:nrow(CH)){#
  if( CH$h[i] < 44){#
    CH[i,5:48][(CH$h[i]  + 1):44] <- 0#
  } #
}#
#
##split data by sex#
CH.m <- as.matrix(CH[CH$sex == 1,][-(1:4)])#
age.m <- as.matrix(age.h[CH$sex == 1,][-(1)])#
h.m <- as.matrix(CH[CH$sex == 1,"h"])#
site.m <- as.matrix(CH[CH$sex == 1,"site"])#
#
CH.f <- as.matrix(CH[CH$sex == 0,][-(1:4)])#
age.f <- as.matrix(age.h[CH$sex == 0,][-(1)])#
h.f <- as.matrix(CH[CH$sex == 0,"h"])#
site.f <- as.matrix(CH[CH$sex == 0,"site"])#
#
## to avoid individuals captured multiple times in the same day #
CH.f[CH.f > 1] <- 1#
CH.m[CH.m > 1] <- 1#
#
### create groups, augment data#
#
## Augment the capture-histories by pseudo-individuals#
nz <- 500#
CHm.aug <- rbind(CH.m, matrix(0, ncol = dim(CH.m)[2], nrow = nz))#
CHf.aug <- rbind(CH.f, matrix(0, ncol = dim(CH.f)[2], nrow = nz))#
y <- rbind(CHm.aug, CHf.aug)#
#
##sex groups#
f <- rep(1, dim(CHf.aug)[1])#
m <- rep(0, dim(CHm.aug)[1])#
sexes <- c(m, f)#
#
## site groups#
f.site.ag <- c(site.f, rep(1,0.5*nz), rep(0, 0.5*nz))#
m.site.ag <- c(site.m, rep(1,0.5*nz), rep(0, 0.5*nz))#
sites <- c(m.site.ag, f.site.ag)#
#
##create h (last day of possible capture)#
h.m <- c(h.m, rep(44, nz))#
h.f <- c(h.f, rep(44, nz))#
h <- c(h.m, h.f)#
#
##wing.wear groups#
age.m <- rbind(age.m, matrix(NA, nrow=nz, ncol=ncol(age.m)))#
age.f <- rbind(age.f, matrix(NA, nrow=nz, ncol=ncol(age.f)))#
ages <- rbind(age.m, age.f)#
## create a matric of 1s where an indivudal can be caught and 0s after#
## it was caught and killed#
#
available <- matrix(1, nrow=nrow(y), ncol=ncol(y))#
#
for (i in 1:nrow(available)){#
  if(h[i] < 44){#
    available[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
## Good initial values for the latent state z are needed to run the#
## model in JAGS. The simplest option that works is to give just a#
## matrix with a 1 at all places.#
z.init <- y#
z.init[z.init==0] <- 1#
z.init[is.na(z.init)] <- 1#
#
## fill in zeros after an individual was captured and killed#
for (i in 1:nrow(z.init)){#
  if(h[i] < 44){#
    z.init[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
inits <- function(){list(z=z.init)}#
#
## Bundle data#
#
jags.data <- list(y = y, n.occasions = dim(y)[2], M = dim(y)[1],#
                  sexes = sexes, sites=sites, x=available, mm = length(m))#
#
## Parameters monitored#
parameters <- c("psi" ,"beta.p","beta.sex", "beta.slope", "b",#
                "Nsuperm", "Nsuperf", "Nm", "Nf", "Bm", "Bf","alpha")
sexes
sites
site.m
as.matrix(CH[CH$sex == 1,"site"]) -1
as.matrix(CH[CH$sex == 0,"site"]) -1
CH <- read.csv("../../Data/CH.csv")#
CH$site[CH$site == 0] <- 2#
#
age.h <- read.csv("../../Data/age_history_class.csv")#
age.h <- age.h[match(rownames(CH), rownames(age.h)),]#
#
## add zeros after an individual was killed#
for (i in 1:nrow(CH)){#
  if( CH$h[i] < 44){#
    CH[i,5:48][(CH$h[i]  + 1):44] <- 0#
  } #
}#
#
##split data by sex#
CH.m <- as.matrix(CH[CH$sex == 1,][-(1:4)])#
age.m <- as.matrix(age.h[CH$sex == 1,][-(1)])#
h.m <- as.matrix(CH[CH$sex == 1,"h"])#
site.m <- as.matrix(CH[CH$sex == 1,"site"]) -1#
#
CH.f <- as.matrix(CH[CH$sex == 0,][-(1:4)])#
age.f <- as.matrix(age.h[CH$sex == 0,][-(1)])#
h.f <- as.matrix(CH[CH$sex == 0,"h"])#
site.f <- as.matrix(CH[CH$sex == 0,"site"]) -1#
#
## to avoid individuals captured multiple times in the same day #
CH.f[CH.f > 1] <- 1#
CH.m[CH.m > 1] <- 1#
#
### create groups, augment data#
#
## Augment the capture-histories by pseudo-individuals#
nz <- 500#
CHm.aug <- rbind(CH.m, matrix(0, ncol = dim(CH.m)[2], nrow = nz))#
CHf.aug <- rbind(CH.f, matrix(0, ncol = dim(CH.f)[2], nrow = nz))#
y <- rbind(CHm.aug, CHf.aug)#
#
##sex groups#
f <- rep(1, dim(CHf.aug)[1])#
m <- rep(0, dim(CHm.aug)[1])#
sexes <- c(m, f)#
#
## site groups#
f.site.ag <- c(site.f, rep(1,0.5*nz), rep(0, 0.5*nz))#
m.site.ag <- c(site.m, rep(1,0.5*nz), rep(0, 0.5*nz))#
sites <- c(m.site.ag, f.site.ag)#
#
##create h (last day of possible capture)#
h.m <- c(h.m, rep(44, nz))#
h.f <- c(h.f, rep(44, nz))#
h <- c(h.m, h.f)#
#
##wing.wear groups#
age.m <- rbind(age.m, matrix(NA, nrow=nz, ncol=ncol(age.m)))#
age.f <- rbind(age.f, matrix(NA, nrow=nz, ncol=ncol(age.f)))#
ages <- rbind(age.m, age.f)#
## create a matric of 1s where an indivudal can be caught and 0s after#
## it was caught and killed#
#
available <- matrix(1, nrow=nrow(y), ncol=ncol(y))#
#
for (i in 1:nrow(available)){#
  if(h[i] < 44){#
    available[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
## Good initial values for the latent state z are needed to run the#
## model in JAGS. The simplest option that works is to give just a#
## matrix with a 1 at all places.#
z.init <- y#
z.init[z.init==0] <- 1#
z.init[is.na(z.init)] <- 1#
#
## fill in zeros after an individual was captured and killed#
for (i in 1:nrow(z.init)){#
  if(h[i] < 44){#
    z.init[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
inits <- function(){list(z=z.init)}#
#
## Bundle data#
#
jags.data <- list(y = y, n.occasions = dim(y)[2], M = dim(y)[1],#
                  sexes = sexes, sites=sites, x=available, mm = length(m))#
#
## Parameters monitored#
parameters <- c("psi" ,"beta.p","beta.sex", "beta.slope", "b",#
                "Nsuperm", "Nsuperf", "Nm", "Nf", "Bm", "Bf","alpha")
sites
sexes
CH <- read.csv("../../Data/CH.csv")#
CH$site[CH$site == 0] <- 2#
#
age.h <- read.csv("../../Data/age_history_class.csv")#
age.h <- age.h[match(rownames(CH), rownames(age.h)),]#
#
## add zeros after an individual was killed#
for (i in 1:nrow(CH)){#
  if( CH$h[i] < 44){#
    CH[i,5:48][(CH$h[i]  + 1):44] <- 0#
  } #
}#
#
##split data by sex#
CH.m <- as.matrix(CH[CH$sex == 1,][-(1:4)])#
age.m <- as.matrix(age.h[CH$sex == 1,][-(1)])#
h.m <- as.matrix(CH[CH$sex == 1,"h"])#
site.m <- as.matrix(CH[CH$sex == 1,"site"]) -1#
#
CH.f <- as.matrix(CH[CH$sex == 0,][-(1:4)])#
age.f <- as.matrix(age.h[CH$sex == 0,][-(1)])#
h.f <- as.matrix(CH[CH$sex == 0,"h"])#
site.f <- as.matrix(CH[CH$sex == 0,"site"]) -1#
#
## to avoid individuals captured multiple times in the same day #
CH.f[CH.f > 1] <- 1#
CH.m[CH.m > 1] <- 1#
#
### create groups, augment data#
#
## Augment the capture-histories by pseudo-individuals#
nz <- 500#
CHm.aug <- rbind(CH.m, matrix(0, ncol = dim(CH.m)[2], nrow = nz))#
CHf.aug <- rbind(CH.f, matrix(0, ncol = dim(CH.f)[2], nrow = nz))#
y <- rbind(CHm.aug, CHf.aug)#
#
##sex groups#
f <- rep(1, dim(CHf.aug)[1])#
m <- rep(0, dim(CHm.aug)[1])#
sexes <- c(m, f)#
#
## site groups#
f.site.ag <- c(site.f, rep(1,0.5*nz), rep(0, 0.5*nz))#
m.site.ag <- c(site.m, rep(1,0.5*nz), rep(0, 0.5*nz))#
sites <- c(m.site.ag, f.site.ag)#
#
##create h (last day of possible capture)#
h.m <- c(h.m, rep(44, nz))#
h.f <- c(h.f, rep(44, nz))#
h <- c(h.m, h.f)#
#
##wing.wear groups#
age.m <- rbind(age.m, matrix(NA, nrow=nz, ncol=ncol(age.m)))#
age.f <- rbind(age.f, matrix(NA, nrow=nz, ncol=ncol(age.f)))#
ages <- rbind(age.m, age.f)#
## create a matric of 1s where an indivudal can be caught and 0s after#
## it was caught and killed#
#
available <- matrix(1, nrow=nrow(y), ncol=ncol(y))#
#
for (i in 1:nrow(available)){#
  if(h[i] < 44){#
    available[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
## Good initial values for the latent state z are needed to run the#
## model in JAGS. The simplest option that works is to give just a#
## matrix with a 1 at all places.#
z.init <- y#
z.init[z.init==0] <- 1#
z.init[is.na(z.init)] <- 1#
#
## fill in zeros after an individual was captured and killed#
for (i in 1:nrow(z.init)){#
  if(h[i] < 44){#
    z.init[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
inits <- function(){list(z=z.init)}#
#
## Bundle data#
#
jags.data <- list(y = y, n.occasions = dim(y)[2], M = dim(y)[1],#
                  sexes = sexes, sites=sites, x=available, mm = length(m))#
#
## Parameters monitored#
parameters <- c("psi" ,"intercept",  "time.effect", "site.effect",#
                "site.time.interaction", " sex.phi.effect", " sex.p.effect",#
                "Nsuperm", "Nsuperf", "Nm", "Nf", "Bm", "Bf","alpha")
site
sites
sexes
z.inir
z.init
y[1,1]
CH <- read.csv("../../Data/CH.csv")#
CH$site[CH$site == 0] <- 2#
#
age.h <- read.csv("../../Data/age_history_class.csv")#
age.h <- age.h[match(rownames(CH), rownames(age.h)),]#
#
## add zeros after an individual was killed#
for (i in 1:nrow(CH)){#
  if( CH$h[i] < 44){#
    CH[i,5:48][(CH$h[i]  + 1):44] <- 0#
  } #
}#
#
##split data by sex#
CH.m <- as.matrix(CH[CH$sex == 1,][-(1:4)])#
age.m <- as.matrix(age.h[CH$sex == 1,][-(1)])#
h.m <- as.matrix(CH[CH$sex == 1,"h"])#
site.m <- as.matrix(CH[CH$sex == 1,"site"]) -1#
#
CH.f <- as.matrix(CH[CH$sex == 0,][-(1:4)])#
age.f <- as.matrix(age.h[CH$sex == 0,][-(1)])#
h.f <- as.matrix(CH[CH$sex == 0,"h"])#
site.f <- as.matrix(CH[CH$sex == 0,"site"]) -1#
#
## to avoid individuals captured multiple times in the same day #
CH.f[CH.f > 1] <- 1#
CH.m[CH.m > 1] <- 1#
#
### create groups, augment data#
#
## Augment the capture-histories by pseudo-individuals#
nz <- 500#
CHm.aug <- rbind(CH.m, matrix(0, ncol = dim(CH.m)[2], nrow = nz))#
CHf.aug <- rbind(CH.f, matrix(0, ncol = dim(CH.f)[2], nrow = nz))#
y <- rbind(CHm.aug, CHf.aug)#
#
##sex groups#
f <- rep(1, dim(CHf.aug)[1])#
m <- rep(0, dim(CHm.aug)[1])#
sexes <- c(m, f)#
#
## site groups#
f.site.ag <- c(site.f, rep(1,0.5*nz), rep(0, 0.5*nz))#
m.site.ag <- c(site.m, rep(1,0.5*nz), rep(0, 0.5*nz))#
sites <- c(m.site.ag, f.site.ag)#
#
##create h (last day of possible capture)#
h.m <- c(h.m, rep(44, nz))#
h.f <- c(h.f, rep(44, nz))#
h <- c(h.m, h.f)#
#
##wing.wear groups#
age.m <- rbind(age.m, matrix(NA, nrow=nz, ncol=ncol(age.m)))#
age.f <- rbind(age.f, matrix(NA, nrow=nz, ncol=ncol(age.f)))#
ages <- rbind(age.m, age.f)#
## create a matric of 1s where an indivudal can be caught and 0s after#
## it was caught and killed#
#
available <- matrix(1, nrow=nrow(y), ncol=ncol(y))#
#
for (i in 1:nrow(available)){#
  if(h[i] < 44){#
    available[i,][(h[i] + 1 ):44] <- 0#
  }#
}#
#
## Good initial values for the latent state z are needed to run the#
## model in JAGS. The simplest option that works is to give just a#
## matrix with a 1 at all places.#
z.init <- y#
z.init[z.init==0] <- 1#
z.init[is.na(z.init)] <- 1#
#
## fill in zeros after an individual was captured and killed#
## for (i in 1:nrow(z.init)){#
##   if(h[i] < 44){#
##     z.init[i,][(h[i] + 1 ):44] <- 0#
##   }#
## }#
#
inits <- function(){list(z=z.init)}#
#
## Bundle data#
#
jags.data <- list(y = y, n.occasions = dim(y)[2], M = dim(y)[1],#
                  sexes = sexes, sites=sites, x=available, mm = length(m))#
#
## Parameters monitored#
parameters <- c("psi" ,"alpha",  "beta.time", "beta.site",#
                "int.site.time", " beta.sex.phi", " beta.sex.p",#
                "Nsuperm", "Nsuperf", "Nm", "Nf", "Bm", "Bf","alpha")
z.init
available
head(available)
class(z.init)
rm(list=ls())#
library("rjags")#
library("R2jags")#
setwd("~/Dropbox/Speyeria/Working/rest-occ/time-site")
CH <- read.csv("../../Data/CH.csv")
head(CH)
CH$sex
CH.m <- as.matrix(CH[CH$sex == 1,][-(1:4)])
CH.m
h.m <- as.matrix(CH[CH$sex == 1,"h"])#
site.m <- as.matrix(CH[CH$sex == 1,"site"])
CH.f <- as.matrix(CH[CH$sex == 0,][-(1:4)])#
h.f <- as.matrix(CH[CH$sex == 0,"h"])#
site.f <- as.matrix(CH[CH$sex == 0,"site"])
CH.f[CH.f > 1] <- 1#
CH.m[CH.m > 1] <- 1
nz <- 500#
CHm.aug <- rbind(CH.m, matrix(0, ncol = dim(CH.m)[2], nrow = nz))#
CHf.aug <- rbind(CH.f, matrix(0, ncol = dim(CH.f)[2], nrow = nz))#
y <- rbind(CHm.aug, CHf.aug)
sex groups#
f <- rep(0, dim(CHf.aug)[1])#
m <- rep(1, dim(CHm.aug)[1])#
sexes <- c(m, f)#
#
## site groups#
f.site.ag <- c(site.f, rep(1,0.5*nz), rep(0, 0.5*nz))#
m.site.ag <- c(site.m, rep(1,0.5*nz), rep(0, 0.5*nz))#
sites <- c(m.site.ag, f.site.ag)#
#
##create h (last day of possible capture)#
h.m <- c(h.m, rep(44, nz))#
h.f <- c(h.f, rep(44, nz))#
h <- c(h.m, h.f)
h
it was caught and killed#
#
available <- matrix(1, nrow=nrow(y), ncol=ncol(y))#
#
for (i in 1:nrow(available)){#
  if(h[i] < 44){#
    available[i,][(h[i] + 1 ):44] <- 0#
  }#
}
z.init <- matrix(1, nrow=nrow(y), ncol=ncol(y))
z.init
library("rjags")#
library("R2jags")#
library("lme4")#
setwd("~/Dropbox/Speyeria/Working/Polcode/Visitation")#
#
sink("glmm.int.txt")#
cat("#
model{#
#
## Priors#
for (i in 1:ngroups){		#
  alpha[i] ~ dnorm(mu.int, tau.int)	#
}#
#
mu.int ~ dnorm(0, 0.001)		#
tau.int <- 1 / (sigma.int * sigma.int)#
sigma.int ~ dunif(0, 100)		#
#
beta.pop[1] <- 0			#
beta.pop[2] ~ dnorm(0, 0.001)#
#
beta.graz[1] <- 0			#
beta.graz[2] ~ dnorm(0, 0.001)#
#
beta.flo ~ dnorm(0, 0.001)#
#
beta.time[1] <- 0		#
beta.time[2] ~ dnorm(0, 0.001)#
#
beta.int[1,1] <- 0#
beta.int[1,2] <- 0#
beta.int[2,1] <- 0#
beta.int[2,2] ~ dnorm(0, 0.001)#
#
## Likelihood#
for (i in 1:n) {#
  visit[i] ~ dpois(lambda[i]) #
  lambda[i] <- exp(alpha[plant[i]] + beta.pop[pop[i]] + beta.graz[graz[i]] +#
                   beta.time[time[i]] + beta.int[pop[i], graz[i]]#
                                      + beta.flo*flower[i])#
}#
}#
",fill=TRUE)#
sink()#
visitation <- read.csv("data/visitation.csv")#
visitation <- visitation[visitation$flower > 0,]#
visitation <- visitation[!is.na(visitation$visits),]#
#
pop <- visitation$site#
graz <- visitation$pre.post#
visit <- visitation$visits#
plant <- as.factor(visitation$plant_num)#
flower <- visitation$flowers#
ngroups = max(as.numeric(plant))#
n <- nrow(visitation)#
time <- visitation$time#
# Bundle data#
jags.data <- list(visit=visit, graz = as.numeric(graz), pop = as.numeric(pop), n = n, plant = as.numeric(plant), ngroups=ngroups, flower=flower, time=as.numeric(time))#
#
# Inits function#
inits <- function(){ list(alpha = rnorm(ngroups))}#
#
# Parameters to estimate#
params <- c("alpha", "beta.pop", "beta.graz", "beta.int", "beta.flo","mu.int" ,"sigma.int", "beta.time")#
#
# MCMC settings#
ni <- 10^4#
nb <- 5000#
nt <- 5#
nc <- 3#
#
# Start Gibbs sampling#
out <- jags(jags.data, inits, params, "glmm.int.txt", n.thin=nt, #
n.chains=nc, n.burnin=nb, n.iter=ni)#
#
# Print estimates#
print(out, dig = 3)#
#
library(lme4)#
summary(lmer(visit~ pop*graz + flower + time + (1|plant), family="poisson"))
save(out, file="saved/visit-glmm.Rdata")
out <- jags(jags.data, inits, params, "glmm.int.txt", n.thin=nt, #
n.chains=nc, n.burnin=nb, n.iter=ni)#
#
# Print estimates#
print(out, dig = 3)#
save(out, file="saved/visit-glmm.Rdata")#
#
library(lme4)#
summary(lmer(visit~ pop*graz + flower + time + (1|plant), family="poisson"))
Inits function#
inits <- function(){ list(alpha = rnorm(ngroups))}#
#
# Parameters to estimate#
params <- c("beta.pop", "beta.graz", "beta.int", "beta.flo","mu.int" ,#
            "sigma.int", "beta.time")#
#
# MCMC settings#
ni <- 10^4#
nb <- 5000#
nt <- 5#
nc <- 3#
#
# Start Gibbs sampling#
out <- jags(jags.data, inits, params, "glmm.int.txt", n.thin=nt, #
n.chains=nc, n.burnin=nb, n.iter=ni)#
#
# Print estimates#
print(out, dig = 3)#
save(out, file="saved/visit-glmm.Rdata")
summary(lmer(visit~ pop*graz + flower + time + (1|plant), family="poisson"))
y[1,1]
z.init[1,1]
sites
library("rjags")#
library("R2jags")#
library("lme4")#
setwd("~/Dropbox/Speyeria/Analysis/Polcode/Visitation")
visitation <- read.csv(../"data/visitation.csv")
visitation <- read.csv(../"data/visitation.csv")
visitation <- read.csv("../data/visitation.csv")
library("rjags")#
library("R2jags")#
library("lme4")#
setwd("~/Documents/Bayesian_analysis/Working/Popcode/Nectar_availability")#
#
## ancova on nectar availability through time#
#
# Define model#
sink("ancova.txt")#
cat("#
model {#
#
# Priors#
 for (i in 1:n.group){		#
    alpha[i] ~ dnorm(0, 0.001)		# Intercepts#
    beta[i] ~ dnorm(0, 0.001)		# Slopes#
 }#
 sigma ~ dunif(0, 100)			# Residual standard deviation#
 tau <- 1 / ( sigma * sigma)#
#
# Likelihood#
 for (i in 1:n) {#
    nectar[i] ~ dnorm(mu[i], tau)#
    mu[i] <- alpha[pop[i]] + beta[pop[i]]* day[i]#
 }#
#
# Derived quantities#
# Define effects relative to baseline level#
 a.effe2 <- alpha[2] - alpha[1]		# Intercept ug vs. g#
 b.effe2 <- beta[2] - beta[1]		# Slope ug vs. g#
#
}#
",fill=TRUE)#
sink()#
# Bundle data#
fd <-read.csv("Flower counts with males.csv",header=TRUE)#
pop <- fd$site#
day <- fd$day#
nectar <- fd$f.male#
n <- nrow(fd)#
n.group = max(as.numeric(pop))#
#
JAGS.data <- list(nectar = as.numeric(nectar), pop = as.numeric(pop), #
day = as.numeric(scale(day)), n.group =  n.group, n = n)#
#
# Inits function#
inits <- function(){ list(alpha = rnorm(n.group, 0, 2), #
beta = rnorm(n.group, 1, 1), sigma = rlnorm(1))}#
#
# Parameters to estimate#
parameters <- c("alpha", "beta", "sigma", "a.effe2", #
"b.effe2")#
#
# MCMC settings#
ni <- 10^3#
nb <- 200#
nt <- 2#
nc <- 3#
#
# Start Markov chains#
out <- jags(JAGS.data, inits, parameters, "ancova.txt", n.thin=nt, #
n.chains=nc, n.burnin=nb, n.iter=ni)#
print(out, dig = 3)			# Bayesian analysis#
#
summary(lm(nectar ~ pop * as.numeric(scale(day))))	# The ML solution again#
print(lm(nectar ~ pop * as.numeric(scale(day)))$coefficients, dig = 4)
Define model#
sink("ancova.txt")#
cat("#
model {#
#
# Priors#
 for (i in 1:n.group){		#
    alpha[i] ~ dnorm(0, 0.001)		# Intercepts#
    beta[i] ~ dnorm(0, 0.001)		# Slopes#
 }#
 sigma ~ dunif(0, 100)			# Residual standard deviation#
 tau <- 1 / ( sigma * sigma)#
#
# Likelihood#
 for (i in 1:n) {#
    nectar[i] ~ dnorm(mu[i], tau)#
    mu[i] <- alpha[pop[i]] + beta[pop[i]]* day[i]#
 }#
#
# Derived quantities#
# Define effects relative to baseline level#
 a.effe2 <- alpha[2] - alpha[1]		# Intercept ug vs. g#
 b.effe2 <- beta[2] - beta[1]		# Slope ug vs. g#
#
}#
",fill=TRUE)#
sink()#
# Bundle data
fd <-read.csv("../data/Flower counts with males.csv",header=TRUE)
library("rjags")#
library("R2jags")#
library("lme4")#
setwd("~/Dropbox/Speyeria/Analysis/Polcode/Nectar_availability")#
#
## ancova on nectar availability through time#
#
# Define model#
sink("ancova.txt")#
cat("#
model {#
#
# Priors#
 for (i in 1:n.group){		#
    alpha[i] ~ dnorm(0, 0.001)		# Intercepts#
    beta[i] ~ dnorm(0, 0.001)		# Slopes#
 }#
 sigma ~ dunif(0, 100)			# Residual standard deviation#
 tau <- 1 / ( sigma * sigma)#
#
# Likelihood#
 for (i in 1:n) {#
    nectar[i] ~ dnorm(mu[i], tau)#
    mu[i] <- alpha[pop[i]] + beta[pop[i]]* day[i]#
 }#
#
# Derived quantities#
# Define effects relative to baseline level#
 a.effe2 <- alpha[2] - alpha[1]		# Intercept ug vs. g#
 b.effe2 <- beta[2] - beta[1]		# Slope ug vs. g#
#
}#
",fill=TRUE)#
sink()#
# Bundle data#
fd <-read.csv("../data/Flower counts with males.csv",header=TRUE)#
pop <- fd$site#
day <- fd$day#
nectar <- fd$f.male#
n <- nrow(fd)#
n.group = max(as.numeric(pop))#
#
JAGS.data <- list(nectar = as.numeric(nectar), pop = as.numeric(pop), #
day = as.numeric(scale(day)), n.group =  n.group, n = n)#
#
# Inits function#
inits <- function(){ list(alpha = rnorm(n.group, 0, 2), #
beta = rnorm(n.group, 1, 1), sigma = rlnorm(1))}#
#
# Parameters to estimate#
parameters <- c("alpha", "beta", "sigma", "a.effe2", #
"b.effe2")#
#
# MCMC settings#
ni <- 10^3#
nb <- 200#
nt <- 2#
nc <- 3#
#
# Start Markov chains#
out <- jags(JAGS.data, inits, parameters, "ancova.txt", n.thin=nt, #
n.chains=nc, n.burnin=nb, n.iter=ni)#
print(out, dig = 3)			# Bayesian analysis#
#
summary(lm(nectar ~ pop * as.numeric(scale(day))))	# The ML solution again#
print(lm(nectar ~ pop * as.numeric(scale(day)))$coefficients, dig = 4)
rm(list=ls())#
library("rjags")#
library("R2jags")#
setwd("~/Dropbox/Speyeria/Working/rest-occ/time-site")#
#
source('src/prep_site_sex_time.R')
rm(list=ls())#
library("rjags")#
library("R2jags")#
setwd("~/Dropbox/Speyeria/Analysis/rest-occ/time-site")#
#
source('src/prep_site_sex_time.R')
load("/Users/lcp/Dropbox/Speyeria/Results/g_js_occ_11_16.Rdata")
load('~/Dropbox/Sky Islands/Analysis/Occupancy/saved/1-0-summary.RData')
************************************************************#
setwd('~/Dropbox/Sky Islands/Analysis/Occupancy')#
rm(list=ls())#
source('src/misc.R')#
library('abind')#
library('rjags')#
library('R2jags')#
load.module("glm")#
source('src/prep_plant.R')#
source('src/model_spec_re-lat.R')#
## ************************************************************#
## ************************************************************#
scale <- 1e3#
save.dir <- 'saved'#
d <- prep(nzero=0,#
          threshold=1,#
          phen=TRUE,#
          save.dir=save.dir)
load('saved/plant-spec-lat-1-0-summary.RData')#
cols <- c('mean', 'sd', '2.5%', '97.5%', 'Rhat', 'n.eff')#
summary$bugs[,cols]
load('saved/plant-spec-RE-lat-1-0-summary.RData')#
cols <- c('mean', 'sd', '2.5%', '97.5%', 'Rhat', 'n.eff')#
summary$bugs[,cols]
expit(-5.3648791)
load('~/Dropbox/Sky Islands/Analysis/Occupancy/saved/plant-spec-re-lat2.RData')
load('saved/plant-spec-re-lat2.RData')#
cols <- c('mean', 'sd', '2.5%', '97.5%', 'Rhat', 'n.eff')#
summary$bugs[,cols]
expit(6.75)
120*0.565
120*0.565*2
180*2*0.565
203.4+135.6
92.5*2*.565
92.5*2*.565*2
17.5*0.565*2
17.5*0.565*2*3
37.4*0.565*2
37.4*0.565*2*2
84.52+59.33+209.05
1004+1617_1177_202
1004+1617+1177+202
